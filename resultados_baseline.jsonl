{"id": "concert_singer", "pergunta": "How many singers do we have?", "sql_esperado": "SELECT count(*) FROM singer", "sql_gerado": "SELECT COUNT(*) FROM singer"}
{"id": "concert_singer", "pergunta": "What is the total number of singers?", "sql_esperado": "SELECT count(*) FROM singer", "sql_gerado": "SELECT COUNT(*) FROM singers"}
{"id": "concert_singer", "pergunta": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "sql_esperado": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "sql_gerado": "SELECT name, country, age FROM singer ORDER BY age DESC"}
{"id": "concert_singer", "pergunta": "What are the names, countries, and ages for every singer in descending order of age?", "sql_esperado": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "sql_gerado": "SELECT name, country, age FROM singer ORDER BY age DESC"}
{"id": "concert_singer", "pergunta": "What is the average, minimum, and maximum age of all singers from France?", "sql_esperado": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "sql_gerado": "SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE nationality = 'France'"}
{"id": "concert_singer", "pergunta": "What is the average, minimum, and maximum age for all French singers?", "sql_esperado": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "sql_gerado": "SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE nationality = 'French' AND profession = 'singer' AND language = 'French'"}
{"id": "concert_singer", "pergunta": "Show the name and the release year of the song by the youngest singer.", "sql_esperado": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "sql_gerado": "SELECT artist_name, release_year FROM songs JOIN singers ON songs.singer_id = singers.id ORDER BY singers.age ASC LIMIT 1"}
{"id": "concert_singer", "pergunta": "What are the names and release years for all the songs of the youngest singer?", "sql_esperado": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "sql_gerado": "SELECT singer_name, song_release_year FROM songs JOIN singers ON songs.singer_id = singers.id ORDER BY song_release_year ASC LIMIT 1"}
{"id": "concert_singer", "pergunta": "What are all distinct countries where singers above age 20 are from?", "sql_esperado": "SELECT DISTINCT country FROM singer WHERE age  >  20", "sql_gerado": "SELECT DISTINCT born_country FROM singer WHERE age > 20"}
{"id": "concert_singer", "pergunta": "What are  the different countries with singers above age 20?", "sql_esperado": "SELECT DISTINCT country FROM singer WHERE age  >  20", "sql_gerado": "SELECT DISTINCT born_country FROM singer WHERE age > 20"}
{"id": "concert_singer", "pergunta": "Show all countries and the number of singers in each country.", "sql_esperado": "SELECT country ,  count(*) FROM singer GROUP BY country", "sql_gerado": "SELECT country, COUNT(singer_id) as number_of_singers FROM singer JOIN location ON singer.location_id = location.location_id GROUP BY country"}
{"id": "concert_singer", "pergunta": "How many singers are from each country?", "sql_esperado": "SELECT country ,  count(*) FROM singer GROUP BY country", "sql_gerado": "SELECT country, COUNT(*) as singer_count FROM singers GROUP BY country"}
{"id": "concert_singer", "pergunta": "List all song names by singers above the average age.", "sql_esperado": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "sql_gerado": "SELECT song_name FROM songs WHERE singer_age > (SELECT AVG(singer_age) FROM singers)"}
{"id": "concert_singer", "pergunta": "What are all the song names by singers who are older than average?", "sql_esperado": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "sql_gerado": "SELECT song_name FROM singer_songs"}
{"id": "concert_singer", "pergunta": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "sql_esperado": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "sql_gerado": "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}
{"id": "concert_singer", "pergunta": "What are the locations and names of all stations with capacity between 5000 and 10000?", "sql_esperado": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "sql_gerado": "SELECT location, name FROM station WHERE capacity BETWEEN 5000 AND 10000"}
{"id": "concert_singer", "pergunta": "What is the maximum capacity and the average of all stadiums ?", "sql_esperado": "select max(capacity), average from stadium", "sql_gerado": "SELECT MAX(capacity) AS max_capacity, AVG(capacity) AS average_capacity FROM stadium"}
{"id": "concert_singer", "pergunta": "What is the average and maximum capacities for all stadiums ?", "sql_esperado": "select avg(capacity) ,  max(capacity) from stadium", "sql_gerado": "SELECT AVG(capacity) AS average_capacity, MAX(capacity) AS maximum_capacity FROM stadium"}
{"id": "concert_singer", "pergunta": "What is the name and capacity for the stadium with highest average attendance?", "sql_esperado": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "sql_gerado": "SELECT name, capacity FROM stadium ORDER BY AVG(attendance) DESC LIMIT 1"}
{"id": "concert_singer", "pergunta": "What is the name and capacity for the stadium with the highest average attendance?", "sql_esperado": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "sql_gerado": "SELECT name, capacity FROM stadium ORDER BY AVG(attendance) DESC LIMIT 1"}
{"id": "concert_singer", "pergunta": "How many concerts are there in year 2014 or 2015?", "sql_esperado": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "sql_gerado": "SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015)"}
{"id": "concert_singer", "pergunta": "How many concerts occurred in 2014 or 2015?", "sql_esperado": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "sql_gerado": "SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015)"}
{"id": "concert_singer", "pergunta": "Show the stadium name and the number of concerts in each stadium.", "sql_esperado": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "sql_gerado": "SELECT stadium_name, COUNT(*) as number_of_concerts FROM concerts GROUP BY stadium_name"}
{"id": "concert_singer", "pergunta": "For each stadium, how many concerts play there?", "sql_esperado": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "sql_gerado": "SELECT stadium_name, COUNT(concert_id) as number_of_concerts"}
{"id": "concert_singer", "pergunta": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "sql_esperado": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT stadium_name, capacity FROM concert WHERE year >= 2014 GROUP BY stadium_name, capacity ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "concert_singer", "pergunta": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "sql_esperado": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "sql_gerado": "SELECT stadium_name, capacity FROM stadium WHERE number_of_concerts_after_2013 = (SELECT MAX(number_of_concerts_after_2013) FROM stadium)"}
{"id": "concert_singer", "pergunta": "Which year has most number of concerts?", "sql_esperado": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "concert_singer", "pergunta": "What is the year that had the most concerts?", "sql_esperado": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT MAX(year) FROM concerts"}
{"id": "concert_singer", "pergunta": "Show the stadium names without any concert.", "sql_esperado": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "sql_gerado": "SELECT name FROM stadium WHERE concert_id IS NULL"}
{"id": "concert_singer", "pergunta": "What are the names of the stadiums without any concerts?", "sql_esperado": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "sql_gerado": "SELECT stadium_name FROM events JOIN stadiums ON events.stadium_id = stadiums.id WHERE events.event_type != 'concert'"}
{"id": "concert_singer", "pergunta": "Show countries where a singer above age 40 and a singer below 30 are from.", "sql_esperado": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "sql_gerado": "SELECT born_country FROM singer WHERE age > 40 AND age < 30"}
{"id": "concert_singer", "pergunta": "Show names for all stadiums except for stadiums having a concert in year 2014.", "sql_esperado": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "sql_gerado": "SELECT name FROM stadium WHERE concert_year != 2014"}
{"id": "concert_singer", "pergunta": "What are the names of all stadiums that did not have a concert in 2014?", "sql_esperado": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "sql_gerado": "SELECT stadium_name FROM concert WHERE concert_year != 2014 AND stadium_name IN (SELECT stadium_name FROM stadium)"}
{"id": "concert_singer", "pergunta": "Show the name and theme for all concerts and the number of singers in each concert.", "sql_esperado": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "sql_gerado": "SELECT concert_name, theme, COUNT(singer_id) AS number_of_singers FROM concert_performance INNER JOIN singer ON concert_performance.singer_id = singer.singer_id GROUP BY concert_name, theme"}
{"id": "concert_singer", "pergunta": "What are the names , themes , and number of singers for every concert ?", "sql_esperado": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "sql_gerado": "SELECT name, theme, COUNT(singer) AS number_of_singers FROM concert JOIN singer ON concert.concert_id = singer.concert_id GROUP BY name, theme"}
{"id": "concert_singer", "pergunta": "List singer names and number of concerts for each singer.", "sql_esperado": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "sql_gerado": "SELECT singer_name, number_of_concerts FROM singer"}
{"id": "concert_singer", "pergunta": "What are the names of the singers and number of concerts for each person?", "sql_esperado": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "sql_gerado": "SELECT singer_name, number_of_concerts FROM singer"}
{"id": "concert_singer", "pergunta": "List all singer names in concerts in year 2014.", "sql_esperado": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "sql_gerado": "SELECT singer_name FROM concert WHERE year = 2014"}
{"id": "concert_singer", "pergunta": "What are the names of the singers who performed in a concert in 2014?", "sql_esperado": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "sql_gerado": "SELECT singer_name FROM concert_performance WHERE year = 2014"}
{"id": "concert_singer", "pergunta": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "sql_esperado": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "sql_gerado": "SELECT singer_name, nation FROM singer"}
{"id": "concert_singer", "pergunta": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "sql_esperado": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "sql_gerado": "SELECT singer_name, country_of_origin FROM singers"}
{"id": "concert_singer", "pergunta": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "sql_esperado": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "sql_gerado": "SELECT stadium_name, location FROM stadiums"}
{"id": "concert_singer", "pergunta": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "sql_esperado": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "sql_gerado": "SELECT stadium_name, location FROM concert WHERE year IN (2014, 2015) GROUP BY stadium_name, location HAVING COUNT(DISTINCT year) = 2"}
{"id": "concert_singer", "pergunta": "Find the number of concerts happened in the stadium with the highest capacity .", "sql_esperado": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "sql_gerado": "SELECT COUNT(*) FROM concert WHERE stadium_capacity = (SELECT MAX(stadium_capacity) FROM stadium)"}
{"id": "concert_singer", "pergunta": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "sql_esperado": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "sql_gerado": "SELECT COUNT(*) FROM concert WHERE stadium_capacity = (SELECT MAX(stadium_capacity) FROM stadium)"}
{"id": "pets_1", "pergunta": "Find the number of pets whose weight is heavier than 10.", "sql_esperado": "SELECT count(*) FROM pets WHERE weight  >  10", "sql_gerado": "SELECT count(*) FROM pets WHERE weight > 10"}
{"id": "pets_1", "pergunta": "How many pets have a greater weight than 10?", "sql_esperado": "SELECT count(*) FROM pets WHERE weight  >  10", "sql_gerado": "SELECT count(*) FROM pets WHERE weight > 10"}
{"id": "pets_1", "pergunta": "Find the weight of the youngest dog.", "sql_esperado": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "sql_gerado": "SELECT weight FROM dogs ORDER BY age LIMIT 1"}
{"id": "pets_1", "pergunta": "How much does the youngest dog weigh?", "sql_esperado": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "sql_gerado": "SELECT weight FROM dogs ORDER BY age LIMIT 1"}
{"id": "pets_1", "pergunta": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "sql_esperado": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "sql_gerado": "SELECT pet_type, MAX(weight) AS max_weight FROM pets GROUP BY pet_type"}
{"id": "pets_1", "pergunta": "List the maximum weight and type for each type of pet.", "sql_esperado": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "sql_gerado": "SELECT type, MAX(weight) as max_weight FROM pets GROUP BY type"}
{"id": "pets_1", "pergunta": "Find number of pets owned by students who are older than 20.", "sql_esperado": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "sql_gerado": "SELECT COUNT(*) FROM student WHERE age > 20 AND has_pet = 1"}
{"id": "pets_1", "pergunta": "How many pets are owned by students that have an age greater than 20?", "sql_esperado": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "sql_gerado": "SELECT COUNT(*) FROM student_pets WHERE student_age > 20"}
{"id": "pets_1", "pergunta": "Find the number of dog pets that are raised by female students (with sex F).", "sql_esperado": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "sql_gerado": "SELECT COUNT(*) FROM students_pets WHERE pet_type = 'dog' AND student_sex = 'F'"}
{"id": "pets_1", "pergunta": "How many dog pets are raised by female students?", "sql_esperado": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "sql_gerado": "SELECT COUNT(*) FROM students_pets WHERE pet_type = 'dog' AND gender = 'female'"}
{"id": "pets_1", "pergunta": "Find the number of distinct type of pets.", "sql_esperado": "SELECT count(DISTINCT pettype) FROM pets", "sql_gerado": "SELECT COUNT(DISTINCT type) FROM pets"}
{"id": "pets_1", "pergunta": "How many different types of pet are there?", "sql_esperado": "SELECT count(DISTINCT pettype) FROM pets", "sql_gerado": "SELECT COUNT(DISTINCT type) FROM pet"}
{"id": "pets_1", "pergunta": "Find the first name of students who have cat or dog pet.", "sql_esperado": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "sql_gerado": "SELECT first_name FROM students WHERE pet IN ('cat', 'dog')"}
{"id": "pets_1", "pergunta": "What are the first names of every student who has a cat or dog as a pet?", "sql_esperado": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "sql_gerado": "SELECT first_name FROM student WHERE pet IN ('cat', 'dog')"}
{"id": "pets_1", "pergunta": "Find the first name of students who have both cat and dog pets .", "sql_esperado": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "sql_gerado": "SELECT first_name FROM student WHERE pet IN ('cat', 'dog') AND pet IS NOT NULL"}
{"id": "pets_1", "pergunta": "What are the students' first names who have both cats and dogs as pets?", "sql_esperado": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "sql_gerado": "SELECT first_name FROM students WHERE pets LIKE '%cat%' AND pets LIKE '%dog%'"}
{"id": "pets_1", "pergunta": "Find the major and age of students who do not have a cat pet.", "sql_esperado": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "sql_gerado": "SELECT major, age FROM students WHERE pet_type != 'cat'"}
{"id": "pets_1", "pergunta": "What major is every student who does not own a cat as a pet, and also how old are they?", "sql_esperado": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "sql_gerado": "SELECT major, age FROM student WHERE pet_type <> 'cat'"}
{"id": "pets_1", "pergunta": "Find the id of students who do not have a cat pet.", "sql_esperado": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "sql_gerado": "SELECT id FROM students WHERE pet_type != 'cat'"}
{"id": "pets_1", "pergunta": "What are the ids of the students who do not own cats as pets?", "sql_esperado": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "sql_gerado": "SELECT student_id FROM students WHERE pet_type != 'cat'"}
{"id": "pets_1", "pergunta": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "sql_esperado": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "sql_gerado": "SELECT first_name, age FROM students WHERE pet = 'dog' AND cat_pet IS NULL"}
{"id": "pets_1", "pergunta": "What is the first name of every student who has a dog but does not have a cat?", "sql_esperado": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "sql_gerado": "SELECT first_name FROM student WHERE has_dog = true AND has_cat = false"}
{"id": "pets_1", "pergunta": "Find the type and weight of the youngest pet.", "sql_esperado": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "sql_gerado": "SELECT type, weight FROM pets ORDER BY age LIMIT 1"}
{"id": "pets_1", "pergunta": "What type of pet is the youngest animal, and how much does it weigh?", "sql_esperado": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "sql_gerado": "SELECT type, weight FROM animals ORDER BY age LIMIT 1"}
{"id": "pets_1", "pergunta": "Find the id and weight of all pets whose age is older than 1.", "sql_esperado": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "sql_gerado": "SELECT id, weight FROM pets WHERE age > 1"}
{"id": "pets_1", "pergunta": "What is the id and weight of every pet who is older than 1?", "sql_esperado": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "sql_gerado": "SELECT id, weight FROM pets WHERE age > 1"}
{"id": "pets_1", "pergunta": "Find the average and maximum age for each type of pet.", "sql_esperado": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "sql_gerado": "SELECT pet_type, AVG(age) AS average_age, MAX(age) AS max_age FROM pet GROUP BY pet_type"}
{"id": "pets_1", "pergunta": "What is the average and maximum age for each pet type?", "sql_esperado": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "sql_gerado": "SELECT pet_type, AVG(age) AS average_age, MAX(age) AS max_age FROM pets GROUP BY pet_type"}
{"id": "pets_1", "pergunta": "Find the average weight for each pet type.", "sql_esperado": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "sql_gerado": "SELECT pet_type, AVG(weight) FROM pets GROUP BY pet_type"}
{"id": "pets_1", "pergunta": "What is the average weight for each type of pet?", "sql_esperado": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "sql_gerado": "SELECT type, AVG(weight) as AverageWeight FROM pet GROUP BY type"}
{"id": "pets_1", "pergunta": "Find the first name and age of students who have a pet.", "sql_esperado": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "sql_gerado": "SELECT first_name, age FROM students WHERE has_pet = true"}
{"id": "pets_1", "pergunta": "What are the different first names and ages of the students who do have pets?", "sql_esperado": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "sql_gerado": "SELECT first_name, age FROM students JOIN pets ON students.student_id = pets.student_id GROUP BY first_name, age HAVING pets.pet_id IS NOT NULL"}
{"id": "pets_1", "pergunta": "Find the id of the pet owned by student whose last name is ‘Smith’.", "sql_esperado": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "sql_gerado": "SELECT pet_id FROM student WHERE last_name = 'Smith'"}
{"id": "pets_1", "pergunta": "What is the id of the pet owned by the student whose last name is 'Smith'?", "sql_esperado": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "sql_gerado": "SELECT pet_id FROM student_pet WHERE last_name = 'Smith'"}
{"id": "pets_1", "pergunta": "Find the number of pets for each student who has any pet and student id.", "sql_esperado": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "sql_gerado": "SELECT student_id, COUNT(pet_id) as number_of_pets FROM student_pets WHERE student_id IS NOT NULL GROUP BY student_id"}
{"id": "pets_1", "pergunta": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "sql_esperado": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "sql_gerado": "SELECT student_id, COUNT(pet_id) as number_of_pets FROM student_has_pet GROUP BY student_id"}
{"id": "pets_1", "pergunta": "Find the first name and gender of student who have more than one pet.", "sql_esperado": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "sql_gerado": "SELECT first_name, gender FROM student WHERE num_pets > 1"}
{"id": "pets_1", "pergunta": "What is the first name and gender of the all the students who have more than one pet?", "sql_esperado": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "sql_gerado": "SELECT first_name, gender FROM students WHERE num_pets > 1"}
{"id": "pets_1", "pergunta": "Find the last name of the student who has a cat that is age 3.", "sql_esperado": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "sql_gerado": "SELECT student_last_name FROM student_pet WHERE pet_age = 3 AND pet_type = 'cat'"}
{"id": "pets_1", "pergunta": "What is the last name of the student who has a cat that is 3 years old?", "sql_esperado": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "sql_gerado": "SELECT student_last_name FROM student_pets WHERE pet_age = 3"}
{"id": "pets_1", "pergunta": "Find the average age of students who do not have any pet .", "sql_esperado": "select avg(age) from student where stuid not in (select stuid from has_pet)", "sql_gerado": "SELECT AVG(age) FROM student WHERE pet_id IS NULL"}
{"id": "pets_1", "pergunta": "What is the average age for all students who do not own any pets ?", "sql_esperado": "select avg(age) from student where stuid not in (select stuid from has_pet)", "sql_gerado": "SELECT AVG(age) FROM student WHERE pet_ownership = 'No Pet'"}
{"id": "car_1", "pergunta": "How many continents are there?", "sql_esperado": "SELECT count(*) FROM CONTINENTS;", "sql_gerado": ""}
{"id": "car_1", "pergunta": "What is the number of continents?", "sql_esperado": "SELECT count(*) FROM CONTINENTS;", "sql_gerado": "This question is not about SQL, but rather a factual geographical question. The number of continents is typically considered to be 7: Africa, Antarctica, Asia, Europe, North America, Australia (Oceania), and South America. However, this can vary depending on the specific definition used. SQL cannot answer this question directly."}
{"id": "car_1", "pergunta": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "sql_esperado": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "sql_gerado": "SELECT continent_id, continent_name, COUNT(country_id) as num_countries FROM country JOIN continent ON country.continent_id = continent.continent_id GROUP BY continent_id, continent_name"}
{"id": "car_1", "pergunta": "For each continent, list its id, name, and how many countries it has?", "sql_esperado": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "sql_gerado": "SELECT continent_id, name, COUNT(country_id) FROM continent JOIN country ON continent.id = country.continent_id GROUP BY continent_id, name"}
{"id": "car_1", "pergunta": "How many countries are listed?", "sql_esperado": "SELECT count(*) FROM COUNTRIES;", "sql_gerado": "SELECT COUNT(DISTINCT born_country) FROM head"}
{"id": "car_1", "pergunta": "How many countries exist?", "sql_esperado": "SELECT count(*) FROM COUNTRIES;", "sql_gerado": "SELECT COUNT(DISTINCT born_country) FROM head"}
{"id": "car_1", "pergunta": "How many models does each car maker produce? List maker full name, id and the number.", "sql_esperado": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "sql_gerado": "SELECT maker_full_name, id, COUNT(*) as number_of_models FROM car_maker JOIN car ON car_maker.id = car.maker_id GROUP BY maker_full_name, id"}
{"id": "car_1", "pergunta": "What is the full name of each car maker, along with its id and how many models it produces?", "sql_esperado": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "sql_gerado": "SELECT car_maker_name, id, COUNT(model_name) FROM car_maker JOIN car ON car_maker.id = car.car_maker_id GROUP BY car_maker_name"}
{"id": "car_1", "pergunta": "Which model of the car has the minimum horsepower?", "sql_esperado": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "sql_gerado": "SELECT model FROM car ORDER BY horsepower ASC LIMIT 1"}
{"id": "car_1", "pergunta": "What is the model of the car with the smallest amount of horsepower?", "sql_esperado": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "sql_gerado": "SELECT model FROM car ORDER BY horsepower ASC LIMIT 1"}
{"id": "car_1", "pergunta": "Find the model of the car whose weight is below the average weight.", "sql_esperado": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "sql_gerado": "SELECT model FROM cars WHERE weight < (SELECT AVG(weight) FROM cars)"}
{"id": "car_1", "pergunta": "What is the model for the car with a weight smaller than the average?", "sql_esperado": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "sql_gerado": "This question seems to be mixing two different domains (SQL and cars). To provide a SQL query, I would need a table that contains car information, including weight and model. Here's an example:"}
{"id": "car_1", "pergunta": "Find the name of the makers that produced some cars in the year of 1970?", "sql_esperado": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "sql_gerado": "SELECT maker_name FROM car_maker WHERE EXISTS (SELECT 1 FROM cars WHERE car_maker.maker_name = cars.maker_name AND cars.year = 1970)"}
{"id": "car_1", "pergunta": "What is the name of the different car makers who produced a car in 1970?", "sql_esperado": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "sql_gerado": "SELECT make FROM cars WHERE year = 1970 GROUP BY make"}
{"id": "car_1", "pergunta": "Find the make and production time of the cars that were produced in the earliest year?", "sql_esperado": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "sql_gerado": "SELECT make, production_year FROM cars ORDER BY production_year ASC LIMIT 1"}
{"id": "car_1", "pergunta": "What is the maker of the carr produced in the earliest year and what year was it?", "sql_esperado": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "sql_gerado": "SELECT maker, creation_year FROM car WHERE creation_year = (SELECT MIN(creation_year) FROM car)"}
{"id": "car_1", "pergunta": "Which distinct car models are the produced after 1980?", "sql_esperado": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "sql_gerado": "SELECT distinct model FROM car WHERE year > 1980"}
{"id": "car_1", "pergunta": "What are the different models for the cards produced after 1980?", "sql_esperado": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "sql_gerado": "SELECT model FROM card WHERE year_of_production > 1980"}
{"id": "car_1", "pergunta": "How many car makers are there in each continents? List the continent name and the count.", "sql_esperado": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "sql_gerado": "SELECT continent, COUNT(*) as car_makers"}
{"id": "car_1", "pergunta": "What is the name of each continent and how many car makers are there in each one?", "sql_esperado": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "sql_gerado": "SELECT continent, COUNT(car_maker) as num_car_makers FROM location JOIN car_maker ON location.id = car_maker.location_id GROUP BY continent"}
{"id": "car_1", "pergunta": "Which of the countries has the most car makers? List the country name.", "sql_esperado": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "sql_gerado": "SELECT country, COUNT(car_maker) as num_car_makers FROM car_maker GROUP BY country ORDER BY num_car_makers DESC LIMIT 1"}
{"id": "car_1", "pergunta": "What is the name of the country with the most car makers?", "sql_esperado": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "sql_gerado": "SELECT country FROM car_maker GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "car_1", "pergunta": "How many car models are produced by each maker ? Only list the count and the maker full name .", "sql_esperado": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "sql_gerado": "SELECT maker_full_name, COUNT(*) FROM car_model GROUP BY maker_full_name"}
{"id": "car_1", "pergunta": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "sql_esperado": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "sql_gerado": "SELECT maker_id, full_name, COUNT(model_id) as number_of_models"}
{"id": "car_1", "pergunta": "What is the accelerate of the car make amc hornet sportabout (sw)?", "sql_esperado": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "sql_gerado": ""}
{"id": "car_1", "pergunta": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "sql_esperado": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "sql_gerado": ""}
{"id": "car_1", "pergunta": "How many car makers are there in france?", "sql_esperado": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "sql_gerado": "SELECT COUNT(*) FROM manufacturer WHERE country = 'France' AND type = 'car'"}
{"id": "car_1", "pergunta": "What is the number of makers of care in France?", "sql_esperado": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "sql_gerado": "SELECT COUNT(*) FROM maker WHERE country = 'France' AND product = 'car'"}
{"id": "car_1", "pergunta": "How many car models are produced in the usa?", "sql_esperado": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "sql_gerado": "SELECT COUNT(*) FROM car_models WHERE production_country = 'USA'"}
{"id": "car_1", "pergunta": "What is the count of the car models produced in the United States?", "sql_esperado": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "sql_gerado": "SELECT COUNT(*) FROM car WHERE production_country = 'United States'"}
{"id": "car_1", "pergunta": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "sql_esperado": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "sql_gerado": "SELECT AVG(mpg) FROM cars WHERE num_cylinders = 4"}
{"id": "car_1", "pergunta": "What is the average miles per gallon of all the cards with 4 cylinders?", "sql_esperado": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "sql_gerado": "SELECT AVG(miles_per_gallon) FROM car WHERE number_of_cylinders = 4"}
{"id": "car_1", "pergunta": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "sql_esperado": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "sql_gerado": "SELECT MIN(weight) FROM car WHERE year = 1974 AND num_cylinders = 8"}
{"id": "car_1", "pergunta": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "sql_esperado": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "sql_gerado": "SELECT MIN(weight) FROM car WHERE num_cylinders = 8 AND year = 1974"}
{"id": "car_1", "pergunta": "What are all the makers and models?", "sql_esperado": "SELECT Maker ,  Model FROM MODEL_LIST;", "sql_gerado": "SELECT maker, model FROM product"}
{"id": "car_1", "pergunta": "What are the makers and models?", "sql_esperado": "SELECT Maker ,  Model FROM MODEL_LIST;", "sql_gerado": "SELECT maker, model FROM product"}
{"id": "car_1", "pergunta": "What are the countries having at least one car maker? List name and id.", "sql_esperado": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "sql_gerado": "SELECT country, id FROM car_maker GROUP BY country HAVING COUNT(*) > 0"}
{"id": "car_1", "pergunta": "What are the names and ids of all countries with at least one car maker?", "sql_esperado": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "sql_gerado": "SELECT country_name, id FROM country JOIN car_maker ON country.id = car_maker.country_id GROUP BY country_name HAVING COUNT(*) > 0"}
{"id": "car_1", "pergunta": "What is the number of the cars with horsepower more than 150?", "sql_esperado": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "sql_gerado": "SELECT count(*) FROM cars WHERE horsepower > 150"}
{"id": "car_1", "pergunta": "What is the number of cars with a horsepower greater than 150?", "sql_esperado": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "sql_gerado": "SELECT count(*) FROM cars WHERE horsepower > 150"}
{"id": "car_1", "pergunta": "What is the average weight of cars each year?", "sql_esperado": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "sql_gerado": "SELECT AVG(weight) FROM cars GROUP BY year"}
{"id": "car_1", "pergunta": "What is the average weight and year for each year?", "sql_esperado": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "sql_gerado": "SELECT YEAR(creation) AS year, AVG(weight) AS average_weight"}
{"id": "car_1", "pergunta": "Which countries in europe have at least 3 car manufacturers?", "sql_esperado": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "sql_gerado": "SELECT country FROM car_manufacturer WHERE continent = 'Europe' GROUP BY country HAVING COUNT(*) >= 3"}
{"id": "car_1", "pergunta": "What are the names of all European countries with at least 3 manufacturers?", "sql_esperado": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "sql_gerado": "SELECT countries.name"}
{"id": "car_1", "pergunta": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "sql_esperado": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "sql_gerado": "SELECT max(horsepower), make FROM car WHERE num_cylinders = 3 GROUP BY make"}
{"id": "car_1", "pergunta": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "sql_esperado": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "sql_gerado": "SELECT max(horsepower), make FROM cars WHERE cylinders = 3 GROUP BY make"}
{"id": "car_1", "pergunta": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "sql_esperado": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "sql_gerado": "SELECT model FROM car WHERE miles_per_gallon_avg MAX()"}
{"id": "car_1", "pergunta": "What is the car model with the highest mpg ?", "sql_esperado": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "sql_gerado": "SELECT car_model FROM cars ORDER BY mpg DESC LIMIT 1"}
{"id": "car_1", "pergunta": "What is the average horsepower of the cars before 1980?", "sql_esperado": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "sql_gerado": "SELECT AVG(horsepower) FROM car WHERE year < 1980"}
{"id": "car_1", "pergunta": "What is the average horsepower for all cars produced before 1980 ?", "sql_esperado": "select avg(horsepower) from cars_data where year  <  1980;", "sql_gerado": "SELECT AVG(horsepower) FROM car WHERE year_produced < 1980"}
{"id": "car_1", "pergunta": "What is the average edispl of the cars of model volvo?", "sql_esperado": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "sql_gerado": "SELECT AVG(edispl) FROM car WHERE model = 'volvo'"}
{"id": "car_1", "pergunta": "What is the average edispl for all volvos?", "sql_esperado": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "sql_gerado": "SELECT AVG(edispl) FROM car WHERE make = 'Volvo'"}
{"id": "car_1", "pergunta": "What is the maximum accelerate for different number of cylinders?", "sql_esperado": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "sql_gerado": ""}
{"id": "car_1", "pergunta": "What is the maximum accelerate for all the different cylinders?", "sql_esperado": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "sql_gerado": "SELECT MAX(accelerate) FROM car_specs GROUP BY cylinder_count"}
{"id": "car_1", "pergunta": "Which model has the most version(make) of cars?", "sql_esperado": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "sql_gerado": "SELECT model, COUNT(*) as num_versions FROM car_model GROUP BY model ORDER BY num_versions DESC LIMIT 1"}
{"id": "car_1", "pergunta": "What model has the most different versions?", "sql_esperado": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "sql_gerado": "SELECT model, COUNT(DISTINCT version) FROM cars GROUP BY model ORDER BY COUNT(DISTINCT version) DESC"}
{"id": "car_1", "pergunta": "How many cars have more than 4 cylinders?", "sql_esperado": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "sql_gerado": "SELECT count(*) FROM cars WHERE num_cylinders > 4"}
{"id": "car_1", "pergunta": "What is the number of cars with more than 4 cylinders?", "sql_esperado": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "sql_gerado": "SELECT count(*) FROM cars WHERE num_cylinders > 4"}
{"id": "car_1", "pergunta": "how many cars were produced in 1980?", "sql_esperado": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "sql_gerado": "SELECT count(*) FROM cars WHERE year = 1980"}
{"id": "car_1", "pergunta": "In 1980, how many cars were made?", "sql_esperado": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "sql_gerado": "SELECT count(*) FROM cars WHERE year = 1980"}
{"id": "car_1", "pergunta": "How many car models were produced by the maker with full name American Motor Company?", "sql_esperado": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "sql_gerado": "SELECT count(*) FROM car_models WHERE maker = 'American Motor Company'"}
{"id": "car_1", "pergunta": "What is the number of car models created by the car maker American Motor Company?", "sql_esperado": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "sql_gerado": "SELECT COUNT(*) FROM car_models WHERE car_maker = 'American Motor Company'"}
{"id": "car_1", "pergunta": "Which makers designed more than 3 car models? List full name and the id.", "sql_esperado": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "sql_gerado": "SELECT full_name, id FROM maker WHERE num_models > 3"}
{"id": "car_1", "pergunta": "What are the names and ids of all makers with more than 3 models?", "sql_esperado": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "sql_gerado": "SELECT name, id FROM maker WHERE num_models > 3"}
{"id": "car_1", "pergunta": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "sql_esperado": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "sql_gerado": "SELECT model FROM car WHERE maker = 'General Motors' AND weight > 3500"}
{"id": "car_1", "pergunta": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "sql_esperado": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "sql_gerado": "SELECT model FROM car WHERE (maker = 'General Motors' OR weight > 3500)"}
{"id": "car_1", "pergunta": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "sql_esperado": "select distinct year from cars_data where weight between 3000 and 4000;", "sql_gerado": "SELECT year FROM cars WHERE weight >= 3000 AND weight <= 4000"}
{"id": "car_1", "pergunta": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "sql_esperado": "select distinct year from cars_data where weight between 3000 and 4000;", "sql_gerado": "SELECT DISTINCT creation_year FROM cars"}
{"id": "car_1", "pergunta": "What is the horsepower of the car with the largest accelerate?", "sql_esperado": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "sql_gerado": "SELECT max(accelerate_horsepower) FROM car"}
{"id": "car_1", "pergunta": "What is the horsepower of the car with the greatest accelerate?", "sql_esperado": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "sql_gerado": "SELECT max(accelerate_horsepower) FROM car"}
{"id": "car_1", "pergunta": "For model volvo, how many cylinders does the car with the least accelerate have?", "sql_esperado": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "sql_gerado": "SELECT min(acceleration) FROM car WHERE model = 'volvo' AND cylinders = (SELECT min(cylinders) FROM car WHERE model = 'volvo')"}
{"id": "car_1", "pergunta": "For a volvo model, how many cylinders does the version with least accelerate have?", "sql_esperado": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "sql_gerado": "SELECT min(acceleration) FROM car WHERE model = 'volvo' AND model_type = (SELECT model_type FROM car WHERE model = 'volvo' AND cylinders = (SELECT MIN(cylinders) FROM car WHERE model = 'volvo'))"}
{"id": "car_1", "pergunta": "How many cars have a larger accelerate than the car with the largest horsepower?", "sql_esperado": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "sql_gerado": "SELECT count(*) FROM cars WHERE acceleration > (SELECT MAX(horsepower) FROM cars)"}
{"id": "car_1", "pergunta": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "sql_esperado": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "sql_gerado": ""}
{"id": "car_1", "pergunta": "How many countries has more than 2 car makers ?", "sql_esperado": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "sql_gerado": "SELECT COUNT(DISTINCT country) FROM car_maker WHERE country_of_origin > (SELECT COUNT(DISTINCT country) FROM car_maker WHERE number_of_makers > 2)"}
{"id": "car_1", "pergunta": "What is the number of countries with more than 2 car makers ?", "sql_esperado": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "sql_gerado": "SELECT COUNT(DISTINCT born_country) FROM head WHERE num_car_makers > 2"}
{"id": "car_1", "pergunta": "How many cars has over 6 cylinders?", "sql_esperado": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "sql_gerado": "SELECT count(*) FROM cars WHERE num_cylinders > 6"}
{"id": "car_1", "pergunta": "What is the number of carsw ith over 6 cylinders?", "sql_esperado": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "sql_gerado": "SELECT count(*) FROM cars WHERE num_cylinders > 6"}
{"id": "car_1", "pergunta": "For the cars with 4 cylinders, which model has the largest horsepower?", "sql_esperado": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "sql_gerado": "SELECT model FROM car WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1"}
{"id": "car_1", "pergunta": "For all of the 4 cylinder cars, which model has the most horsepower?", "sql_esperado": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "sql_gerado": "SELECT model, SUM(horsepower) as total_horsepower FROM cars WHERE cylinders = 4 GROUP BY model ORDER BY total_horsepower DESC LIMIT 1"}
{"id": "car_1", "pergunta": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "sql_esperado": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "sql_gerado": "SELECT makeid, make_name FROM cars WHERE horsepower > (SELECT MIN(horsepower) FROM cars) AND cylinders <= 3"}
{"id": "car_1", "pergunta": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "sql_esperado": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "sql_gerado": "SELECT make_id, name FROM car WHERE horsepower > (SELECT MIN(horsepower) FROM car) AND cylinders < 4"}
{"id": "car_1", "pergunta": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "sql_esperado": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "sql_gerado": "SELECT max(miles_per_gallon) FROM car WHERE num_cylinders = 8 AND year_of_production < 1980"}
{"id": "car_1", "pergunta": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "sql_esperado": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "sql_gerado": "SELECT MAX(mpg) FROM cars WHERE cylinders = 8 OR year < 1980"}
{"id": "car_1", "pergunta": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "sql_esperado": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "sql_gerado": "SELECT model FROM car WHERE weight < 3500 AND manufacturer != 'Ford Motor Company'"}
{"id": "car_1", "pergunta": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "sql_esperado": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "sql_gerado": "SELECT model FROM car WHERE manufacturer != 'Ford Motor Company' AND weight < 3500"}
{"id": "car_1", "pergunta": "What are the name of the countries where there is not a single car maker?", "sql_esperado": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "sql_gerado": "SELECT distinct born_country FROM head"}
{"id": "car_1", "pergunta": "What are the names of the countries with no car makers?", "sql_esperado": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "sql_gerado": "SELECT countries.name FROM countries"}
{"id": "car_1", "pergunta": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "sql_esperado": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "sql_gerado": "SELECT id, maker FROM car_maker WHERE num_models > 2 AND num_makers > (SELECT COUNT(DISTINCT maker) FROM car_maker)"}
{"id": "car_1", "pergunta": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "sql_esperado": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "sql_gerado": "SELECT id, maker FROM car_maker WHERE num_models > 2 AND num_cars > 3"}
{"id": "car_1", "pergunta": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "sql_esperado": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "sql_gerado": "SELECT country_id, country_name FROM country"}
{"id": "car_1", "pergunta": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "sql_esperado": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "sql_gerado": "SELECT id, name FROM country WHERE (num_car_makers > 3) OR (fiat_produced = 1)"}
{"id": "flight_2", "pergunta": "Which country does Airline \"JetBlue Airways\" belong to?", "sql_esperado": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "sql_gerado": "SELECT born_country FROM head WHERE name = 'Airline JetBlue Airways'"}
{"id": "flight_2", "pergunta": "What country is Jetblue Airways affiliated with?", "sql_esperado": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "sql_gerado": "SELECT country FROM airline WHERE name = 'Jetblue Airways' LIMIT 1"}
{"id": "flight_2", "pergunta": "What is the abbreviation of Airline \"JetBlue Airways\"?", "sql_esperado": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "sql_gerado": "This question is not about SQL, it's about understanding abbreviations. The abbreviation for JetBlue Airways is \"JBU\" (JetBlue). However, this information cannot be retrieved through SQL as it's not a database query."}
{"id": "flight_2", "pergunta": "Which abbreviation corresponds to Jetblue Airways?", "sql_esperado": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "sql_gerado": ""}
{"id": "flight_2", "pergunta": "List all airline names and their abbreviations in \"USA\".", "sql_esperado": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "sql_gerado": "SELECT airline_name, abbreviation FROM airlines WHERE country = 'USA'"}
{"id": "flight_2", "pergunta": "What are the airline names and abbreviations for airlines in the USA?", "sql_esperado": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "sql_gerado": "SELECT name, abbreviation FROM airline WHERE country = 'USA'"}
{"id": "flight_2", "pergunta": "List the airport code and name in the city of Anthony.", "sql_esperado": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "sql_gerado": "SELECT airport_code, name FROM airport WHERE city = 'Anthony'"}
{"id": "flight_2", "pergunta": "Give the airport code and airport name corresonding to the city Anthony.", "sql_esperado": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "sql_gerado": "SELECT airport_code, airport_name FROM airport WHERE city = 'Anthony'"}
{"id": "flight_2", "pergunta": "How many airlines do we have?", "sql_esperado": "SELECT count(*) FROM AIRLINES", "sql_gerado": "SELECT COUNT(*) FROM airlines"}
{"id": "flight_2", "pergunta": "What is the total number of airlines?", "sql_esperado": "SELECT count(*) FROM AIRLINES", "sql_gerado": "SELECT COUNT(*) FROM airlines"}
{"id": "flight_2", "pergunta": "How many airports do we have?", "sql_esperado": "SELECT count(*) FROM AIRPORTS", "sql_gerado": "SELECT COUNT(*) FROM airport"}
{"id": "flight_2", "pergunta": "Return the number of  airports.", "sql_esperado": "SELECT count(*) FROM AIRPORTS", "sql_gerado": "SELECT COUNT(*) FROM airport"}
{"id": "flight_2", "pergunta": "How many flights do we have?", "sql_esperado": "SELECT count(*) FROM FLIGHTS", "sql_gerado": "SELECT COUNT(*) FROM flights"}
{"id": "flight_2", "pergunta": "Return the number of flights.", "sql_esperado": "SELECT count(*) FROM FLIGHTS", "sql_gerado": "SELECT COUNT(*) FROM flights"}
{"id": "flight_2", "pergunta": "Which airline has abbreviation 'UAL'?", "sql_esperado": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "sql_gerado": "SELECT airline_name FROM airline WHERE abbreviation = 'UAL'"}
{"id": "flight_2", "pergunta": "Give the airline with abbreviation 'UAL'.", "sql_esperado": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "sql_gerado": "SELECT * FROM airline WHERE abbreviation = 'UAL'"}
{"id": "flight_2", "pergunta": "How many airlines are from USA?", "sql_esperado": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "sql_gerado": "SELECT COUNT(*) FROM airline WHERE born_country = 'USA'"}
{"id": "flight_2", "pergunta": "Return the number of airlines in the USA.", "sql_esperado": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "sql_gerado": "SELECT COUNT(*) FROM airline WHERE country = 'USA'"}
{"id": "flight_2", "pergunta": "Which city and country is the Alton airport at?", "sql_esperado": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "sql_gerado": "SELECT city, country FROM location WHERE airport = 'Alton'"}
{"id": "flight_2", "pergunta": "Give the city and country for the Alton airport.", "sql_esperado": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "sql_gerado": "SELECT city, country FROM location WHERE airport = 'Alton'"}
{"id": "flight_2", "pergunta": "What is the airport name for airport 'AKO'?", "sql_esperado": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "sql_gerado": "SELECT airport_name FROM airport WHERE airport_code = 'AKO'"}
{"id": "flight_2", "pergunta": "Return the name of the airport with code 'AKO'.", "sql_esperado": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "sql_gerado": "SELECT name FROM airport WHERE code = 'AKO'"}
{"id": "flight_2", "pergunta": "What are airport names at City 'Aberdeen'?", "sql_esperado": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "sql_gerado": "SELECT airport_name FROM airport WHERE city = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "What are the names of airports in Aberdeen?", "sql_esperado": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "sql_gerado": "SELECT airport_name FROM airport WHERE city = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "How many flights depart from 'APG'?", "sql_esperado": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE departure_airport = 'APG'"}
{"id": "flight_2", "pergunta": "Count the number of flights departing from 'APG'.", "sql_esperado": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE departure_airport = 'APG'"}
{"id": "flight_2", "pergunta": "How many flights have destination ATO?", "sql_esperado": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "sql_gerado": "SELECT count(*) FROM flights WHERE destination = 'ATO'"}
{"id": "flight_2", "pergunta": "Count the number of flights into ATO.", "sql_esperado": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE to_airport = 'ATO'"}
{"id": "flight_2", "pergunta": "How many flights depart from City Aberdeen?", "sql_esperado": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE departure_city = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "Return the number of flights departing from Aberdeen.", "sql_esperado": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE departure_city = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "How many flights arriving in Aberdeen city?", "sql_esperado": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "sql_gerado": "SELECT count(*) FROM flights WHERE arrival_city = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "Return the number of flights arriving in Aberdeen.", "sql_esperado": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE arrival_location = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "sql_esperado": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE departure_city = 'Aberdeen' AND destination_city = 'Ashley'"}
{"id": "flight_2", "pergunta": "How many flights fly from Aberdeen to Ashley?", "sql_esperado": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE departure_city = 'Aberdeen' AND arrival_city = 'Ashley'"}
{"id": "flight_2", "pergunta": "How many flights does airline 'JetBlue Airways' have?", "sql_esperado": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'"}
{"id": "flight_2", "pergunta": "Give the number of Jetblue Airways flights.", "sql_esperado": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways'"}
{"id": "flight_2", "pergunta": "How many 'United Airlines' flights go to Airport 'ASY'?", "sql_esperado": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destination_airport = 'ASY'"}
{"id": "flight_2", "pergunta": "Count the number of United Airlines flights arriving in ASY Airport.", "sql_esperado": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destination_airport = 'ASY' AND type = 'arrival'"}
{"id": "flight_2", "pergunta": "How many 'United Airlines' flights depart from Airport 'AHD'?", "sql_esperado": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND departure_airport = 'AHD'"}
{"id": "flight_2", "pergunta": "Return the number of United Airlines flights leaving from AHD Airport.", "sql_esperado": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND departure_airport = 'AHD'"}
{"id": "flight_2", "pergunta": "How many United Airlines flights go to City 'Aberdeen'?", "sql_esperado": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destination = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "Count the number of United Airlines flights that arrive in Aberdeen.", "sql_esperado": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destination = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "Which city has most number of arriving flights?", "sql_esperado": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT city, COUNT(flight_id) as num_flights FROM flights GROUP BY city ORDER BY num_flights DESC LIMIT 1"}
{"id": "flight_2", "pergunta": "Which city has the most frequent destination airport?", "sql_esperado": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT destination_city, COUNT(flights.id) as flight_count"}
{"id": "flight_2", "pergunta": "Which city has most number of departing flights?", "sql_esperado": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT city FROM flights GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "flight_2", "pergunta": "Which city is the most frequent source airport?", "sql_esperado": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT airport_city AS city, COUNT(*) AS frequency"}
{"id": "flight_2", "pergunta": "What is the code of airport that has the highest number of flights?", "sql_esperado": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT airport_code FROM airport WHERE id_flights = (SELECT MAX(id_flights) FROM airport)"}
{"id": "flight_2", "pergunta": "What is the airport code of the airport with the most flights?", "sql_esperado": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT airport_code FROM airport ORDER BY number_of_flights DESC LIMIT 1"}
{"id": "flight_2", "pergunta": "What is the code of airport that has fewest number of flights?", "sql_esperado": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "sql_gerado": "SELECT airport_code FROM airport WHERE num_flights = (SELECT MIN(num_flights) FROM airport)"}
{"id": "flight_2", "pergunta": "Give the code of the airport with the least flights.", "sql_esperado": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "sql_gerado": "SELECT min(airport_code) FROM flights GROUP BY airport_code"}
{"id": "flight_2", "pergunta": "Which airline has most number of flights?", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT airline, COUNT(flight_id) as number_of_flights FROM flight GROUP BY airline ORDER BY number_of_flights DESC LIMIT 1"}
{"id": "flight_2", "pergunta": "What airline serves the most flights?", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "flight_2", "pergunta": "Find the abbreviation and country of the airline that has fewest number of flights?", "sql_esperado": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "sql_gerado": "SELECT abbreviation, country FROM airline ORDER BY COUNT(flight) ASC LIMIT 1"}
{"id": "flight_2", "pergunta": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "sql_esperado": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "sql_gerado": "SELECT abbreviation, country FROM airline WHERE flights = (SELECT MIN(flights) FROM airline)"}
{"id": "flight_2", "pergunta": "What are airlines that have some flight departing from airport 'AHD'?", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "sql_gerado": "SELECT airline FROM flights WHERE airport_departure = 'AHD' GROUP BY airline HAVING COUNT(*) > 0"}
{"id": "flight_2", "pergunta": "Which airlines have a flight with source airport AHD?", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "sql_gerado": "SELECT airlines.name"}
{"id": "flight_2", "pergunta": "What are airlines that have flights arriving at airport 'AHD'?", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "sql_gerado": "SELECT airline FROM flights WHERE arrival_airport = 'AHD'"}
{"id": "flight_2", "pergunta": "Which airlines have a flight with destination airport AHD?", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "sql_gerado": "SELECT airlines.name"}
{"id": "flight_2", "pergunta": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "sql_gerado": "SELECT airlines FROM flights WHERE departure_airport = 'APG' AND arrival_airport = 'CVO' GROUP BY airlines HAVING COUNT(*) > 1"}
{"id": "flight_2", "pergunta": "Which airlines have departing flights from both APG and CVO airports?", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "sql_gerado": "SELECT airlines FROM flights WHERE departure_airport = 'APG' AND arrival_airport = 'CVO' GROUP BY airlines HAVING COUNT(*) > 1"}
{"id": "flight_2", "pergunta": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "sql_gerado": "SELECT airlines FROM flights WHERE departure_airport = 'CVO' AND arrival_airport != 'APG'"}
{"id": "flight_2", "pergunta": "Which airlines have departures from CVO but not from APG airports?", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "sql_gerado": "SELECT airlines FROM departures WHERE airport = 'CVO' AND NOT EXISTS (SELECT * FROM departures WHERE airport = 'APG' AND airlines = departures.airlines)"}
{"id": "flight_2", "pergunta": "Find all airlines that have at least 10 flights.", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "sql_gerado": "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) > 10"}
{"id": "flight_2", "pergunta": "Which airlines have at least 10 flights?", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "sql_gerado": "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) > 10"}
{"id": "flight_2", "pergunta": "Find all airlines that have fewer than 200 flights.", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "sql_gerado": "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200"}
{"id": "flight_2", "pergunta": "Which airlines have less than 200 flights?", "sql_esperado": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "sql_gerado": "SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200"}
{"id": "flight_2", "pergunta": "What are flight numbers of Airline \"United Airlines\"?", "sql_esperado": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "sql_gerado": "SELECT flight_number FROM flights WHERE airline = 'United Airlines'"}
{"id": "flight_2", "pergunta": "Which flight numbers correspond to United Airlines flights?", "sql_esperado": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "sql_gerado": "SELECT flight_number FROM flights WHERE airline = 'United Airlines'"}
{"id": "flight_2", "pergunta": "What are flight numbers of flights departing from Airport \"APG\"?", "sql_esperado": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "sql_gerado": "SELECT flight_number FROM flights WHERE departure_airport = 'APG'"}
{"id": "flight_2", "pergunta": "Give the flight numbers of flights leaving from APG.", "sql_esperado": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "sql_gerado": "SELECT flight_number FROM flights WHERE departure_airport = 'APG'"}
{"id": "flight_2", "pergunta": "What are flight numbers of flights arriving at Airport \"APG\"?", "sql_esperado": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "sql_gerado": "SELECT flight_number FROM flights WHERE arrival_airport = 'APG'"}
{"id": "flight_2", "pergunta": "Give the flight numbers of flights landing at APG.", "sql_esperado": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "sql_gerado": "SELECT flight_number FROM flights WHERE landing_airport = 'APG'"}
{"id": "flight_2", "pergunta": "What are flight numbers of flights departing from City \"Aberdeen \"?", "sql_esperado": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "sql_gerado": "SELECT flight_number FROM flights WHERE departure_city = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "Give the flight numbers of flights leaving from Aberdeen.", "sql_esperado": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "sql_gerado": "SELECT flight_number FROM flights WHERE departure_city = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "sql_esperado": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "sql_gerado": "SELECT flight_number FROM flights WHERE arrival_city = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "Give the flight numbers of flights arriving in Aberdeen.", "sql_esperado": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "sql_gerado": "SELECT flight_number FROM flights WHERE arrival_city = 'Aberdeen'"}
{"id": "flight_2", "pergunta": "Find the number of flights landing in the city of Aberdeen or Abilene.", "sql_esperado": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE landing_city IN ('Aberdeen', 'Abilene')"}
{"id": "flight_2", "pergunta": "How many flights land in Aberdeen or Abilene?", "sql_esperado": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "sql_gerado": "SELECT COUNT(*) FROM flights WHERE destination IN ('Aberdeen', 'Abilene')"}
{"id": "flight_2", "pergunta": "Find the name of airports which do not have any flight in and out.", "sql_esperado": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "sql_gerado": "SELECT airport_name FROM airport WHERE airport_id NOT IN (SELECT airport_id FROM flight)"}
{"id": "flight_2", "pergunta": "Which airports do not have departing or arriving flights?", "sql_esperado": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "sql_gerado": "SELECT airport FROM airport WHERE (departing_flights IS NULL OR arriving_flights IS NULL)"}
{"id": "employee_hire_evaluation", "pergunta": "How many employees are there?", "sql_esperado": "SELECT count(*) FROM employee", "sql_gerado": "SELECT COUNT(*) FROM employees"}
{"id": "employee_hire_evaluation", "pergunta": "Count the number of employees", "sql_esperado": "SELECT count(*) FROM employee", "sql_gerado": "SELECT COUNT(*) FROM employees"}
{"id": "employee_hire_evaluation", "pergunta": "Sort employee names by their age in ascending order.", "sql_esperado": "SELECT name FROM employee ORDER BY age", "sql_gerado": "SELECT name FROM employee ORDER BY age ASC"}
{"id": "employee_hire_evaluation", "pergunta": "List the names of employees and sort in ascending order of age.", "sql_esperado": "SELECT name FROM employee ORDER BY age", "sql_gerado": "SELECT name FROM employee ORDER BY age ASC"}
{"id": "employee_hire_evaluation", "pergunta": "What is the number of employees from each city?", "sql_esperado": "SELECT count(*) ,  city FROM employee GROUP BY city", "sql_gerado": "SELECT city, COUNT(employee_id) as num_employees FROM employee GROUP BY city"}
{"id": "employee_hire_evaluation", "pergunta": "Count the number of employees for each city.", "sql_esperado": "SELECT count(*) ,  city FROM employee GROUP BY city", "sql_gerado": "SELECT city, COUNT(employee_id) as num_employees FROM employee GROUP BY city"}
{"id": "employee_hire_evaluation", "pergunta": "Which cities do more than one employee under age 30 come from?", "sql_esperado": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "sql_gerado": "SELECT born_city FROM employee WHERE age < 30 GROUP BY born_city HAVING COUNT(*) > 1"}
{"id": "employee_hire_evaluation", "pergunta": "Find the cities that have more than one employee under age 30.", "sql_esperado": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "sql_gerado": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1"}
{"id": "employee_hire_evaluation", "pergunta": "Find the number of shops in each location.", "sql_esperado": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "sql_gerado": "SELECT location, COUNT(*) as number_of_shops FROM shop GROUP BY location"}
{"id": "employee_hire_evaluation", "pergunta": "How many shops are there in each location?", "sql_esperado": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "sql_gerado": "SELECT location, COUNT(*) as shop_count FROM shop GROUP BY location"}
{"id": "employee_hire_evaluation", "pergunta": "Find the manager name and district of the shop whose number of products is the largest.", "sql_esperado": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "sql_gerado": "SELECT manager_name, district FROM shop WHERE num_products = (SELECT MAX(num_products) FROM shop)"}
{"id": "employee_hire_evaluation", "pergunta": "What are the manager name and district of the shop that sells the largest number of products?", "sql_esperado": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "sql_gerado": "SELECT manager_name, district FROM shop WHERE id_shop = (SELECT id_shop FROM shop WHERE total_products_sold = (SELECT MAX(total_products_sold) FROM shop))"}
{"id": "employee_hire_evaluation", "pergunta": "find the minimum and maximum number of products of all stores.", "sql_esperado": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "sql_gerado": "SELECT MIN(num_products) AS min_products, MAX(num_products) AS max_products FROM store"}
{"id": "employee_hire_evaluation", "pergunta": "What are the minimum and maximum number of products across all the shops?", "sql_esperado": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "sql_gerado": "SELECT MIN(product_count) AS min_products, MAX(product_count) AS max_products FROM shop"}
{"id": "employee_hire_evaluation", "pergunta": "Return the name, location and district of all shops in descending order of number of products.", "sql_esperado": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "sql_gerado": "SELECT name, location, district FROM shop ORDER BY number_of_products DESC"}
{"id": "employee_hire_evaluation", "pergunta": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "sql_esperado": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "sql_gerado": "SELECT name, location, district FROM shop ORDER BY number_products DESC"}
{"id": "employee_hire_evaluation", "pergunta": "Find the names of stores whose number products is more than the average number of products.", "sql_esperado": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "sql_gerado": "SELECT store_name FROM store WHERE num_products > (SELECT AVG(num_products) FROM store)"}
{"id": "employee_hire_evaluation", "pergunta": "Which shops' number products is above the average? Give me the shop names.", "sql_esperado": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "sql_gerado": "SELECT shop_name FROM shop WHERE num_products > (SELECT AVG(num_products) FROM shop)"}
{"id": "employee_hire_evaluation", "pergunta": "find the name of employee who was awarded the most times in the evaluation.", "sql_esperado": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT employee_name FROM evaluations GROUP BY employee_name ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "employee_hire_evaluation", "pergunta": "Which employee received the most awards in evaluations? Give me the employee name.", "sql_esperado": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT employee_name FROM employee_awards ORDER BY total_awards DESC LIMIT 1"}
{"id": "employee_hire_evaluation", "pergunta": "Find the name of the employee who got the highest one time bonus.", "sql_esperado": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "sql_gerado": "SELECT employee_name FROM employee WHERE one_time_bonus = (SELECT MAX(one_time_bonus) FROM employee)"}
{"id": "employee_hire_evaluation", "pergunta": "Which employee received the biggest bonus? Give me the employee name.", "sql_esperado": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "sql_gerado": "SELECT employee_name FROM employee WHERE bonus = (SELECT MAX(bonus) FROM employee)"}
{"id": "employee_hire_evaluation", "pergunta": "Find the names of employees who never won any award in the evaluation.", "sql_esperado": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "sql_gerado": "SELECT employee_name FROM employee WHERE award_won IS NULL"}
{"id": "employee_hire_evaluation", "pergunta": "What are the names of the employees who never received any evaluation?", "sql_esperado": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "sql_gerado": "SELECT employee_name FROM employee WHERE evaluation_received IS NULL"}
{"id": "employee_hire_evaluation", "pergunta": "What is the name of the shop that is hiring the largest number of employees?", "sql_esperado": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT shop_name FROM employment JOIN department ON employment.department_id = department.id WHERE employment.employee_count = (SELECT MAX(employment.employee_count) FROM employment)"}
{"id": "employee_hire_evaluation", "pergunta": "Which shop has the most employees? Give me the shop name.", "sql_esperado": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT shop_name FROM shop WHERE num_employees = (SELECT MAX(num_employees) FROM shop)"}
{"id": "employee_hire_evaluation", "pergunta": "Find the name of the shops that do not hire any employee.", "sql_esperado": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "sql_gerado": "SELECT shop_name FROM shop WHERE NOT EXISTS (SELECT 1 FROM employee WHERE shop_id = shop.id)"}
{"id": "employee_hire_evaluation", "pergunta": "Which shops run with no employees? Find the shop names", "sql_esperado": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "sql_gerado": "SELECT name FROM shop WHERE num_employees = 0"}
{"id": "employee_hire_evaluation", "pergunta": "Find the number of employees hired in each shop; show the shop name as well.", "sql_esperado": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "sql_gerado": "SELECT shop_name, COUNT(employee_id) as number_of_employees"}
{"id": "employee_hire_evaluation", "pergunta": "For each shop, return the number of employees working there and the name of the shop.", "sql_esperado": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "sql_gerado": "SELECT shop_name, COUNT(employee_id) as num_employees FROM employee JOIN shop ON employee.shop_id = shop.id GROUP BY shop_name"}
{"id": "employee_hire_evaluation", "pergunta": "What is total bonus given in all evaluations?", "sql_esperado": "SELECT sum(bonus) FROM evaluation", "sql_gerado": "SELECT SUM(bonus) FROM evaluation"}
{"id": "employee_hire_evaluation", "pergunta": "Find the total amount of bonus given in all the evaluations.", "sql_esperado": "SELECT sum(bonus) FROM evaluation", "sql_gerado": "SELECT SUM(bonus) FROM evaluation"}
{"id": "employee_hire_evaluation", "pergunta": "Give me all the information about hiring.", "sql_esperado": "SELECT * FROM hiring", "sql_gerado": "SELECT * FROM hiring; (Assuming there is a table named 'hiring' containing all the information about hiring.)"}
{"id": "employee_hire_evaluation", "pergunta": "What is all the information about hiring?", "sql_esperado": "SELECT * FROM hiring", "sql_gerado": "SELECT * FROM hiring; (Assuming there is a table named 'hiring' containing all the information about hiring.)"}
{"id": "employee_hire_evaluation", "pergunta": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "sql_esperado": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "sql_gerado": "SELECT district FROM store WHERE products_count < 3000 OR products_count > 10000"}
{"id": "employee_hire_evaluation", "pergunta": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "sql_esperado": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "sql_gerado": "SELECT district FROM shop WHERE num_products < 3000 AND num_products > 10000"}
{"id": "employee_hire_evaluation", "pergunta": "How many different store locations are there?", "sql_esperado": "SELECT count(DISTINCT LOCATION) FROM shop", "sql_gerado": "SELECT COUNT(DISTINCT location) FROM store"}
{"id": "employee_hire_evaluation", "pergunta": "Count the number of distinct store locations.", "sql_esperado": "SELECT count(DISTINCT LOCATION) FROM shop", "sql_gerado": "SELECT COUNT(DISTINCT location) FROM store"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "How many documents do we have?", "sql_esperado": "SELECT count(*) FROM Documents", "sql_gerado": "SELECT COUNT(*) FROM documents"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Count the number of documents.", "sql_esperado": "SELECT count(*) FROM Documents", "sql_gerado": "SELECT COUNT(*) FROM documents"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "List document IDs, document names, and document descriptions for all documents.", "sql_esperado": "SELECT document_id ,  document_name ,  document_description FROM Documents", "sql_gerado": "SELECT document_id, document_name, document_description FROM documents"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the ids, names, and descriptions for all documents?", "sql_esperado": "SELECT document_id ,  document_name ,  document_description FROM Documents", "sql_gerado": "SELECT id, name, description FROM documents"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What is the document name and template id for document with description with the letter 'w' in it?", "sql_esperado": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "sql_gerado": "SELECT document_name, template_id FROM documents WHERE description LIKE '%w%'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the names and template ids for documents that contain the letter w in their description.", "sql_esperado": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "sql_gerado": "SELECT name, template_id FROM documents WHERE description LIKE '%w%'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What is the document id, template id and description for document named \"Robbin CV\"?", "sql_esperado": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "sql_gerado": "SELECT id, template_id, description FROM documents WHERE name = 'Robbin CV'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the document id, template id, and description for the document with the name Robbin CV.", "sql_esperado": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "sql_gerado": "SELECT id, template_id, description FROM documents WHERE name = 'Robbin CV'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "How many different templates do all document use?", "sql_esperado": "SELECT count(DISTINCT template_id) FROM Documents", "sql_gerado": "SELECT COUNT(DISTINCT template_id) FROM document"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Count the number of different templates used for documents.", "sql_esperado": "SELECT count(DISTINCT template_id) FROM Documents", "sql_gerado": "SELECT COUNT(DISTINCT template_id) FROM documents"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "How many documents are using the template with type code 'PPT'?", "sql_esperado": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "sql_gerado": "SELECT count(*) FROM documents WHERE template_type_code = 'PPT'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Count the number of documents that use the PPT template type.", "sql_esperado": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "sql_gerado": "SELECT COUNT(*) FROM documents WHERE template_type = 'PPT'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all template ids and number of documents using each template.", "sql_esperado": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "sql_gerado": "SELECT template_id, COUNT(*) as num_docs FROM documents GROUP BY template_id"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are all different template ids used for documents, and how many times were each of them used?", "sql_esperado": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "sql_gerado": "SELECT template_id, COUNT(*) as usage_count FROM document GROUP BY template_id"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What is the id and type code for the template used by the most documents?", "sql_esperado": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT id, type_code FROM template ORDER BY COUNT(document_id) DESC LIMIT 1"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the id and type code of the template that is used for the greatest number of documents.", "sql_esperado": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT id, type_code FROM template WHERE id IN ("}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show ids for all templates that are used by more than one document.", "sql_esperado": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "sql_gerado": "SELECT id FROM template WHERE id IN (SELECT template_id FROM document WHERE template_id IN (SELECT template_id FROM document GROUP BY template_id HAVING COUNT(*) > 1))"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the template ids of any templates used in more than a single document?", "sql_esperado": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "sql_gerado": "SELECT template_id FROM template JOIN document ON template.template_id = document.template_id GROUP BY template_id HAVING COUNT(document_id) > 1"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show ids for all templates not used by any document.", "sql_esperado": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "sql_gerado": "SELECT id FROM template WHERE id NOT IN (SELECT template_id FROM document)"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the ids for templates that are not used in any documents?", "sql_esperado": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "sql_gerado": "SELECT template_id FROM template WHERE id NOT IN (SELECT template_id FROM document)"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "How many templates do we have?", "sql_esperado": "SELECT count(*) FROM Templates", "sql_gerado": "SELECT COUNT(*) FROM templates"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Count the number of templates.", "sql_esperado": "SELECT count(*) FROM Templates", "sql_gerado": "SELECT COUNT(*) FROM templates"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show template ids, version numbers, and template type codes for all templates.", "sql_esperado": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "sql_gerado": "SELECT id, version, type_code FROM templates"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the ids, version numbers, and type codes for each template?", "sql_esperado": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "sql_gerado": "SELECT id, version_number, type_code FROM template"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all distinct template type codes for all templates.", "sql_esperado": "SELECT DISTINCT template_type_code FROM Templates", "sql_gerado": "SELECT DISTINCT template_type_code FROM templates"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the different template type codes?", "sql_esperado": "SELECT DISTINCT template_type_code FROM Templates", "sql_gerado": "SELECT DISTINCT template_type_code FROM template"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the ids of templates with template type code PP or PPT?", "sql_esperado": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "sql_gerado": "SELECT id FROM template WHERE template_type_code IN ('PP', 'PPT')"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the ids of templates that have the code PP or PPT.", "sql_esperado": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "sql_gerado": "SELECT id FROM template WHERE code LIKE 'PP%' OR code LIKE 'PPT'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "How many templates have template type code CV?", "sql_esperado": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "sql_gerado": "SELECT count(*) FROM templates WHERE template_type_code = 'CV'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Count the number of templates of the type CV.", "sql_esperado": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "sql_gerado": "SELECT COUNT(*) FROM templates WHERE type = 'CV'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What is the version number and template type code for the template with version number later than 5?", "sql_esperado": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "sql_gerado": "SELECT version_number, template_type_code FROM templates WHERE version_number > 5"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the version numbers and template type codes of templates with a version number greater than 5.", "sql_esperado": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "sql_gerado": "SELECT version_number, template_type_code FROM templates WHERE version_number > 5"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all template type codes and number of templates for each.", "sql_esperado": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "sql_gerado": "SELECT template_type_code, COUNT(*) as number_of_templates FROM templates GROUP BY template_type_code"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the different template type codes, and how many templates correspond to each?", "sql_esperado": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "sql_gerado": "SELECT DISTINCT template_type_code, COUNT(*) as count"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Which template type code has most number of templates?", "sql_esperado": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT template_type_code, COUNT(*) as number_of_templates"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the type code of the template type that the most templates belong to.", "sql_esperado": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT type_code FROM template GROUP BY type_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all template type codes with less than three templates.", "sql_esperado": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "sql_gerado": "SELECT template_type_code FROM templates WHERE COUNT(*) < 3"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the codes of template types that have fewer than 3 templates?", "sql_esperado": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "sql_gerado": "SELECT template_type_code FROM templates WHERE COUNT(*) < 3"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What the smallest version number and its template type code?", "sql_esperado": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "sql_gerado": "SELECT min(version_number), template_type_code FROM templates"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the lowest version number, along with its corresponding template type code.", "sql_esperado": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "sql_gerado": "SELECT min(version_number) ,  template_type_code FROM templates GROUP BY template_type_code"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What is the template type code of the template used by document with the name \"Data base\"?", "sql_esperado": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "sql_gerado": "SELECT template_type_code FROM document WHERE name = \"Data base\""}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the template type code of the template that is used by a document named Data base.", "sql_esperado": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "sql_gerado": "SELECT template_type_code FROM document WHERE document_name = 'Database'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all document names using templates with template type code BK.", "sql_esperado": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "sql_gerado": "SELECT document_name FROM documents WHERE template_type_code = 'BK'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the names of documents that use templates with the code BK?", "sql_esperado": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "sql_gerado": "SELECT document_name FROM document_usage WHERE template_code = 'BK'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all template type codes and the number of documents using each type.", "sql_esperado": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "sql_gerado": "SELECT template_type, COUNT(*) FROM documents GROUP BY template_type"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the different template type codes, and how many documents use each type?", "sql_esperado": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "sql_gerado": "SELECT DISTINCT template_type_code, COUNT(*) as document_count FROM documents GROUP BY template_type_code"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Which template type code is used by most number of documents?", "sql_esperado": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT template_type_code, COUNT(*) as document_count FROM document GROUP BY template_type_code ORDER BY document_count DESC LIMIT 1"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the code of the template type that is most commonly used in documents.", "sql_esperado": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT mode(code) AS most_common_template_type FROM document"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all template type codes that are not used by any document.", "sql_esperado": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "sql_gerado": "SELECT template_type_code FROM template WHERE NOT EXISTS (SELECT 1 FROM document WHERE document.template_type_code = template.template_type_code)"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the codes of template types that are not used for any document?", "sql_esperado": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "sql_gerado": "SELECT template_type FROM template WHERE NOT EXISTS (SELECT 1 FROM document WHERE document.template_type = template.template_type)"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all template type codes and descriptions.", "sql_esperado": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "sql_gerado": "SELECT template_type_code, description FROM templates"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the type codes and descriptions for all template types?", "sql_esperado": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "sql_gerado": "SELECT type_code, description FROM template_type"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What is the template type descriptions for template type code \"AD\".", "sql_esperado": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "sql_gerado": "SELECT description FROM template_type WHERE template_type_code = 'AD'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the template type description of the template type with the code AD.", "sql_esperado": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "sql_gerado": "SELECT description FROM template_type WHERE code = 'AD'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What is the template type code for template type description \"Book\".", "sql_esperado": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "sql_gerado": "SELECT template_type_code FROM template_type WHERE template_type_description = 'Book'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the type code of the template type with the description \"Book\".", "sql_esperado": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "sql_gerado": "SELECT type_code FROM template WHERE description = 'Book'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the distinct template type descriptions for the templates ever used by any document?", "sql_esperado": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "sql_gerado": "SELECT DISTINCT template_type FROM document"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the different descriptions for templates that have been used in a document.", "sql_esperado": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "sql_gerado": "SELECT DISTINCT template_description FROM document_template_usage"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the template ids with template type description \"Presentation\".", "sql_esperado": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "sql_gerado": "SELECT template_id FROM templates WHERE template_type_description = 'Presentation'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the ids corresponding to templates with the description 'Presentation'.", "sql_esperado": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "sql_gerado": "SELECT id FROM template WHERE description = 'Presentation'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "How many paragraphs in total?", "sql_esperado": "SELECT count(*) FROM Paragraphs", "sql_gerado": ""}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Count the number of paragraphs.", "sql_esperado": "SELECT count(*) FROM Paragraphs", "sql_gerado": ""}
{"id": "cre_Doc_Template_Mgt", "pergunta": "How many paragraphs for the document with name 'Summer Show'?", "sql_esperado": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "sql_gerado": "python"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Count the number of paragraphs in the document named 'Summer Show'.", "sql_esperado": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "sql_gerado": "python"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show paragraph details for paragraph with text 'Korea ' .", "sql_esperado": "select other_details from paragraphs where paragraph_text like 'korea'", "sql_gerado": "SELECT * FROM paragraph WHERE text LIKE '%Korea%'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the details for the paragraph that includes the text 'Korea ' ?", "sql_esperado": "select other_details from paragraphs where paragraph_text like 'korea'", "sql_gerado": "SELECT * FROM paragraph WHERE text LIKE '%Korea%'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "sql_esperado": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "sql_gerado": "SELECT id, text FROM document WHERE name = 'Welcome to NY'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "sql_esperado": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "sql_gerado": "SELECT id, text FROM paragraph WHERE document_title = 'Welcome to NY'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all paragraph texts for the document \"Customer reviews\".", "sql_esperado": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "sql_gerado": "SELECT paragraph_text FROM document WHERE document_name = 'Customer reviews'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the paragraph texts for the document with the name 'Customer reviews'?", "sql_esperado": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "sql_gerado": "python"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all document ids and the number of paragraphs in each document. Order by document id.", "sql_esperado": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "sql_gerado": "SELECT id, COUNT(*) as num_paragraphs FROM paragraph GROUP BY id ORDER BY id"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "sql_esperado": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "sql_gerado": "SELECT id, COUNT(*) as num_paragraphs FROM paragraph GROUP BY id ORDER BY id"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show all document ids, names and the number of paragraphs in each document.", "sql_esperado": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "sql_gerado": "SELECT id, name, num_paragraphs FROM documents"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the ids and names of each document, as well as the number of paragraphs in each?", "sql_esperado": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "sql_gerado": "SELECT id, title, num_paragraphs FROM document"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "List all document ids with at least two paragraphs.", "sql_esperado": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "sql_gerado": "SELECT document_id FROM document WHERE paragraph_count >= 2"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the ids of documents that have 2 or more paragraphs?", "sql_esperado": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "sql_gerado": "SELECT id FROM document WHERE num_paragraphs > 2"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What is the document id and name with greatest number of paragraphs?", "sql_esperado": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT id, name FROM document ORDER BY number_of_paragraphs DESC LIMIT 1"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the id and name of the document with the most paragraphs.", "sql_esperado": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT id, name FROM document ORDER BY num_paragraphs DESC LIMIT 1"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What is the document id with least number of paragraphs?", "sql_esperado": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "sql_gerado": ""}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Return the id of the document with the fewest paragraphs.", "sql_esperado": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "sql_gerado": "SELECT min(num_paragraphs) AS id_min_doc FROM document"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What is the document id with 1 to 2 paragraphs?", "sql_esperado": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "sql_gerado": ""}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Give the ids of documents that have between one and two paragraphs.", "sql_esperado": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "sql_gerado": "SELECT id FROM document WHERE num_paragraphs BETWEEN 1 AND 2"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "sql_esperado": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "sql_gerado": "SELECT id FROM document WHERE paragraph LIKE '%Brazil%' AND paragraph LIKE '%Ireland%'"}
{"id": "cre_Doc_Template_Mgt", "pergunta": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "sql_esperado": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "sql_gerado": "SELECT id FROM document WHERE paragraph_text LIKE '%Brazil%' AND paragraph_text LIKE '%Ireland%'"}
{"id": "course_teach", "pergunta": "How many teachers are there?", "sql_esperado": "SELECT count(*) FROM teacher", "sql_gerado": "SELECT COUNT(*) FROM teachers"}
{"id": "course_teach", "pergunta": "What is the total count of teachers?", "sql_esperado": "SELECT count(*) FROM teacher", "sql_gerado": "SELECT COUNT(*) FROM teachers"}
{"id": "course_teach", "pergunta": "List the names of teachers in ascending order of age.", "sql_esperado": "SELECT Name FROM teacher ORDER BY Age ASC", "sql_gerado": "SELECT name FROM teacher ORDER BY age ASC"}
{"id": "course_teach", "pergunta": "What are the names of the teachers ordered by ascending age?", "sql_esperado": "SELECT Name FROM teacher ORDER BY Age ASC", "sql_gerado": "SELECT name FROM teacher ORDER BY age ASC"}
{"id": "course_teach", "pergunta": "What are the age and hometown of teachers?", "sql_esperado": "SELECT Age ,  Hometown FROM teacher", "sql_gerado": "SELECT age, hometown FROM teachers; (Assuming 'teachers' is the table name and it contains 'age' and 'hometown' columns.)"}
{"id": "course_teach", "pergunta": "What is the age and hometown of every teacher?", "sql_esperado": "SELECT Age ,  Hometown FROM teacher", "sql_gerado": "SELECT age, hometown FROM teacher"}
{"id": "course_teach", "pergunta": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "sql_esperado": "select name from teacher where hometown != \"little lever urban district\"", "sql_gerado": "SELECT name FROM teachers WHERE hometown != 'Little Lever Urban District'"}
{"id": "course_teach", "pergunta": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "sql_esperado": "select name from teacher where hometown != \"little lever urban district\"", "sql_gerado": "SELECT name FROM teachers WHERE hometown <> 'Little Lever Urban District'"}
{"id": "course_teach", "pergunta": "Show the name of teachers aged either 32 or 33?", "sql_esperado": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "sql_gerado": "SELECT name FROM teachers WHERE age IN (32, 33)"}
{"id": "course_teach", "pergunta": "What are the names of the teachers who are aged either 32 or 33?", "sql_esperado": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "sql_gerado": "SELECT name FROM teacher WHERE age IN (32, 33)"}
{"id": "course_teach", "pergunta": "What is the hometown of the youngest teacher?", "sql_esperado": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "sql_gerado": "SELECT hometown FROM teacher ORDER BY age LIMIT 1"}
{"id": "course_teach", "pergunta": "Where is the youngest teacher from?", "sql_esperado": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "sql_gerado": "SELECT born_state FROM teacher ORDER BY age LIMIT 1"}
{"id": "course_teach", "pergunta": "Show different hometown of teachers and the number of teachers from each hometown.", "sql_esperado": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "sql_gerado": "SELECT hometown, COUNT(*) as num_teachers FROM teacher GROUP BY hometown"}
{"id": "course_teach", "pergunta": "For each hometown, how many teachers are there?", "sql_esperado": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "sql_gerado": "SELECT hometown, COUNT(*) as teacher_count FROM teacher GROUP BY hometown"}
{"id": "course_teach", "pergunta": "List the most common hometown of teachers.", "sql_esperado": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": "SELECT mode(hometown) AS MostCommonHometown FROM teacher"}
{"id": "course_teach", "pergunta": "What is the most commmon hometowns for teachers?", "sql_esperado": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": "SELECT hometown, COUNT(*) as count"}
{"id": "course_teach", "pergunta": "Show the hometowns shared by at least two teachers.", "sql_esperado": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "sql_gerado": "SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) > 1"}
{"id": "course_teach", "pergunta": "What are the towns from which at least two teachers come from?", "sql_esperado": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "sql_gerado": "SELECT town FROM teacher GROUP BY town HAVING COUNT(*) > 1"}
{"id": "course_teach", "pergunta": "Show names of teachers and the courses they are arranged to teach.", "sql_esperado": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "sql_gerado": "SELECT teachers.name, courses.course_name"}
{"id": "course_teach", "pergunta": "What is the name of each teacher and what course they teach?", "sql_esperado": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "sql_gerado": "SELECT teacher_name , course FROM teachers_and_courses"}
{"id": "course_teach", "pergunta": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "sql_esperado": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "sql_gerado": "SELECT teacher_name, course FROM teacher_course ORDER BY teacher_name ASC"}
{"id": "course_teach", "pergunta": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "sql_esperado": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "sql_gerado": "SELECT teacher_name, course FROM teacher_course ORDER BY teacher_name ASC"}
{"id": "course_teach", "pergunta": "Show the name of the teacher for the math course.", "sql_esperado": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "sql_gerado": "SELECT teacher_name FROM course WHERE subject = 'math'"}
{"id": "course_teach", "pergunta": "What are the names of the people who teach math courses?", "sql_esperado": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "sql_gerado": "SELECT teacher_name FROM teacher_courses WHERE course = 'Math'"}
{"id": "course_teach", "pergunta": "Show names of teachers and the number of courses they teach.", "sql_esperado": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "sql_gerado": "SELECT teacher_name, COUNT(course_id) as number_of_courses FROM teacher JOIN course ON teacher.teacher_id = course.teacher_id GROUP BY teacher_name"}
{"id": "course_teach", "pergunta": "What are the names of the teachers and how many courses do they teach?", "sql_esperado": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "sql_gerado": "SELECT teacher_name, COUNT(course_id) AS number_of_courses FROM teacher GROUP BY teacher_name"}
{"id": "course_teach", "pergunta": "Show names of teachers that teach at least two courses.", "sql_esperado": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "sql_gerado": "SELECT name FROM teacher WHERE course_id IN ("}
{"id": "course_teach", "pergunta": "What are the names of the teachers who teach at least two courses?", "sql_esperado": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "sql_gerado": "SELECT teacher_name FROM teacher_course"}
{"id": "course_teach", "pergunta": "List the names of teachers who have not been arranged to teach courses.", "sql_esperado": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "sql_gerado": "SELECT name FROM teachers WHERE not exists (SELECT 1 FROM courses_teachers WHERE teachers.id = courses_teachers.teacher_id)"}
{"id": "course_teach", "pergunta": "What are the names of the teachers whose courses have not been arranged?", "sql_esperado": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "sql_gerado": "SELECT teacher_name FROM course WHERE course_arranged = false"}
{"id": "museum_visit", "pergunta": "How many visitors below age 30 are there?", "sql_esperado": "SELECT count(*) FROM visitor WHERE age  <  30", "sql_gerado": "SELECT count(*) FROM visitor WHERE age < 30"}
{"id": "museum_visit", "pergunta": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "sql_esperado": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "sql_gerado": "SELECT name FROM visitor WHERE membership_level > 4 ORDER BY membership_level DESC"}
{"id": "museum_visit", "pergunta": "What is the average age of the visitors whose membership level is not higher than 4?", "sql_esperado": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "sql_gerado": "SELECT AVG(age) FROM visitor WHERE membership_level <= 4"}
{"id": "museum_visit", "pergunta": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "sql_esperado": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "sql_gerado": "SELECT name, membership_level, age FROM visitor WHERE membership_level > 4 ORDER BY age DESC"}
{"id": "museum_visit", "pergunta": "Find the id and name of the museum that has the most staff members?", "sql_esperado": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "sql_gerado": "SELECT id, name FROM department WHERE id=(SELECT department_id FROM staff GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)"}
{"id": "museum_visit", "pergunta": "Find the average number of staff working for the museums that were open before 2009.", "sql_esperado": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "sql_gerado": "SELECT AVG(staff_count) FROM museum WHERE opening_year < 2009"}
{"id": "museum_visit", "pergunta": "What are the opening year and staff number of the museum named Plaza Museum?", "sql_esperado": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "sql_gerado": "SELECT opening_year, staff_number FROM department WHERE name = 'Plaza Museum'"}
{"id": "museum_visit", "pergunta": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "sql_esperado": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "sql_gerado": "SELECT name FROM museum WHERE staff > (SELECT MIN(staff) FROM museum WHERE creation > '2010')"}
{"id": "museum_visit", "pergunta": "find the id, name and age for visitors who visited some museums more than once.", "sql_esperado": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "sql_gerado": "SELECT id, name, age FROM visitor WHERE id IN ("}
{"id": "museum_visit", "pergunta": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "sql_esperado": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "sql_gerado": "SELECT id, name, membership_level FROM visitor ORDER BY SUM(ticket_price) DESC LIMIT 1"}
{"id": "museum_visit", "pergunta": "What are the id and name of the museum visited most times?", "sql_esperado": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT id, name FROM museum ORDER BY visits DESC LIMIT 1"}
{"id": "museum_visit", "pergunta": "What is the name of the museum that had no visitor yet?", "sql_esperado": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "sql_gerado": "SELECT name FROM museum WHERE visitors = 0"}
{"id": "museum_visit", "pergunta": "Find the name and age of the visitor who bought the most tickets at once.", "sql_esperado": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "sql_gerado": "SELECT visitor_name, visitor_age FROM visitor_tickets"}
{"id": "museum_visit", "pergunta": "What are the average and maximum number of tickets bought in all visits?", "sql_esperado": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "sql_gerado": "SELECT AVG(tickets_bought) AS average, MAX(tickets_bought) AS maximum FROM visits"}
{"id": "museum_visit", "pergunta": "What is the total ticket expense of the visitors whose membership level is 1?", "sql_esperado": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "sql_gerado": "SELECT SUM(ticket_expense) FROM visitors WHERE membership_level = 1"}
{"id": "museum_visit", "pergunta": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "sql_esperado": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "sql_gerado": "SELECT visitor_name FROM visitor"}
{"id": "museum_visit", "pergunta": "Find the number of visitors who did not visit any museum opened after 2010.", "sql_esperado": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "sql_gerado": "SELECT COUNT(*) FROM visitor WHERE museum_opening_year > 2010 AND visitor_id NOT IN (SELECT visitor_id FROM visitor_museum WHERE museum_opening_year <= 2010)"}
{"id": "museum_visit", "pergunta": "How many museums were opened after 2013 or before 2008?", "sql_esperado": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "sql_gerado": "SELECT COUNT(*) FROM museum WHERE creation > '2013-01-01' AND creation < '2008-01-01'"}
{"id": "wta_1", "pergunta": "Find the total number of players.", "sql_esperado": "SELECT count(*) FROM players", "sql_gerado": "SELECT COUNT(*) FROM players"}
{"id": "wta_1", "pergunta": "How many players are there?", "sql_esperado": "SELECT count(*) FROM players", "sql_gerado": "SELECT COUNT(*) FROM players"}
{"id": "wta_1", "pergunta": "Find the total number of matches.", "sql_esperado": "SELECT count(*) FROM matches", "sql_gerado": "SELECT COUNT(*) FROM matches"}
{"id": "wta_1", "pergunta": "Count the number of matches.", "sql_esperado": "SELECT count(*) FROM matches", "sql_gerado": "SELECT COUNT(*) FROM matches"}
{"id": "wta_1", "pergunta": "List the first name and birth date of all players from the country with code USA.", "sql_esperado": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "sql_gerado": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'"}
{"id": "wta_1", "pergunta": "What are the first names and birth dates of players from the USA?", "sql_esperado": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "sql_gerado": "SELECT first_name, birth_date FROM players WHERE born_country = 'USA'"}
{"id": "wta_1", "pergunta": "Find the average age of losers and winners of all matches.", "sql_esperado": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "sql_gerado": "SELECT"}
{"id": "wta_1", "pergunta": "What are the average ages of losers and winners across matches?", "sql_esperado": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "sql_gerado": "SELECT AVG(age) AS 'Average Age of Losers', (SELECT AVG(age) FROM matches m JOIN head h ON m.head_id = h.id WHERE m.winner_id IS NULL) AS 'Average Age of Winners'"}
{"id": "wta_1", "pergunta": "Find the average rank of winners in all matches.", "sql_esperado": "SELECT avg(winner_rank) FROM matches", "sql_gerado": "SELECT AVG(rank) FROM matches_results WHERE winner = 1"}
{"id": "wta_1", "pergunta": "What is the average rank for winners in all matches?", "sql_esperado": "SELECT avg(winner_rank) FROM matches", "sql_gerado": "SELECT AVG(rank) FROM matches_results WHERE winner = 1"}
{"id": "wta_1", "pergunta": "Find the highest rank of losers in all matches.", "sql_esperado": "SELECT min(loser_rank) FROM matches", "sql_gerado": "SELECT MAX(loser_rank) FROM match WHERE winner_id IS NULL"}
{"id": "wta_1", "pergunta": "What is the best rank of losers across all matches?", "sql_esperado": "SELECT min(loser_rank) FROM matches", "sql_gerado": "SELECT MIN(rank) FROM losers"}
{"id": "wta_1", "pergunta": "find the number of distinct country codes of all players.", "sql_esperado": "SELECT count(DISTINCT country_code) FROM players", "sql_gerado": "SELECT COUNT(DISTINCT country_code) FROM players"}
{"id": "wta_1", "pergunta": "How many distinct countries do players come from?", "sql_esperado": "SELECT count(DISTINCT country_code) FROM players", "sql_gerado": "SELECT COUNT(DISTINCT born_country) FROM player"}
{"id": "wta_1", "pergunta": "Find the number of distinct name of losers.", "sql_esperado": "SELECT count(DISTINCT loser_name) FROM matches", "sql_gerado": "SELECT COUNT(DISTINCT name) FROM results WHERE win = false"}
{"id": "wta_1", "pergunta": "How many different loser names are there?", "sql_esperado": "SELECT count(DISTINCT loser_name) FROM matches", "sql_gerado": "SELECT COUNT(DISTINCT loser_name) FROM losers"}
{"id": "wta_1", "pergunta": "Find the name of tourney that has more than 10 matches.", "sql_esperado": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "sql_gerado": "SELECT tournament_name FROM matches GROUP BY tournament_name HAVING COUNT(*) > 10"}
{"id": "wta_1", "pergunta": "What are the names of tournaments that have more than 10 matches?", "sql_esperado": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "sql_gerado": "SELECT tournament_name FROM matches JOIN tournaments ON matches.tournament_id = tournaments.id WHERE count(matches.id) > 10"}
{"id": "wta_1", "pergunta": "List the names of all winners who played in both 2013 and 2016.", "sql_esperado": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "sql_gerado": "SELECT name FROM winners WHERE year IN (2013, 2016) GROUP BY name HAVING COUNT(DISTINCT year) = 2"}
{"id": "wta_1", "pergunta": "What are the names of players who won in both 2013 and 2016?", "sql_esperado": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "sql_gerado": "SELECT player_name FROM matches WHERE year IN (2013, 2016) GROUP BY player_name HAVING COUNT(DISTINCT year) = 2"}
{"id": "wta_1", "pergunta": "List the number of all matches who played in years of 2013 or 2016.", "sql_esperado": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "sql_gerado": "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)"}
{"id": "wta_1", "pergunta": "How many matches were played in 2013 or 2016?", "sql_esperado": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "sql_gerado": "SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016"}
{"id": "wta_1", "pergunta": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "sql_esperado": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "sql_gerado": "SELECT country_code, first_name FROM players WHERE won_WTA_Championships = true AND won_Australian_Open = true"}
{"id": "wta_1", "pergunta": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "sql_esperado": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "sql_gerado": "SELECT first_name, country_code FROM players WHERE (WTA_Championships_Won = 1 AND Australian_Open_Won = 1)"}
{"id": "wta_1", "pergunta": "Find the first name and country code of the oldest player.", "sql_esperado": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "sql_gerado": "SELECT first_name, country_code FROM player ORDER BY age DESC LIMIT 1"}
{"id": "wta_1", "pergunta": "What is the first name and country code of the oldest player?", "sql_esperado": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "sql_gerado": "SELECT first_name, country_code FROM player ORDER BY age DESC LIMIT 1"}
{"id": "wta_1", "pergunta": "List the first and last name of all players in the order of birth date.", "sql_esperado": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "sql_gerado": "SELECT first_name, last_name FROM players ORDER BY birth_date"}
{"id": "wta_1", "pergunta": "What are the full names of all players, sorted by birth date?", "sql_esperado": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "sql_gerado": "SELECT full_name FROM players ORDER BY birth_date"}
{"id": "wta_1", "pergunta": "List the first and last name of all players who are left / L hand in the order of birth date.", "sql_esperado": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "sql_gerado": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date"}
{"id": "wta_1", "pergunta": "What are the full names of all left handed players, in order of birth date?", "sql_esperado": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "sql_gerado": "SELECT full_name FROM players WHERE handed = 'left' ORDER BY birth_date"}
{"id": "wta_1", "pergunta": "Find the first name and country code of the player who did the most number of tours.", "sql_esperado": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "sql_gerado": "SELECT first_name, country_code FROM player ORDER BY number_of_tours DESC LIMIT 1"}
{"id": "wta_1", "pergunta": "What is the first name and country code of the player with the most tours?", "sql_esperado": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "sql_gerado": "SELECT first_name, country_code FROM player ORDER BY tours DESC LIMIT 1"}
{"id": "wta_1", "pergunta": "Find the year that has the most number of matches.", "sql_esperado": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT YEAR(creation) as year, COUNT(*) as count"}
{"id": "wta_1", "pergunta": "Which year had the most matches?", "sql_esperado": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT YEAR(match_date) as Year, COUNT(*) as Number_of_Matches"}
{"id": "wta_1", "pergunta": "Find the name and rank points of the winner who won the most times.", "sql_esperado": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT name, rank_points FROM employee WHERE rank_points = (SELECT MAX(rank_points) FROM employee)"}
{"id": "wta_1", "pergunta": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "sql_esperado": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT player_name, total_rank_points"}
{"id": "wta_1", "pergunta": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "sql_esperado": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "sql_gerado": "SELECT player_name FROM tournament_participants WHERE tournament='Australian Open' AND rank_points = (SELECT MAX(rank_points) FROM tournament_participants WHERE tournament='Australian Open')"}
{"id": "wta_1", "pergunta": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "sql_esperado": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "sql_gerado": "SELECT player_name FROM tournament_participants WHERE tournament='Australian Open' AND rank_points=(SELECT MAX(rank_points) FROM tournament_participants WHERE tournament='Australian Open')"}
{"id": "wta_1", "pergunta": "find the names of loser and winner who played in the match with greatest number of minutes.", "sql_esperado": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "sql_gerado": "SELECT winner, loser FROM matches WHERE minutes_played = (SELECT MAX(minutes_played) FROM matches)"}
{"id": "wta_1", "pergunta": "What are the names of the winner and loser who played in the longest match?", "sql_esperado": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "sql_gerado": "SELECT winner, loser FROM matches ORDER BY duration DESC LIMIT 1, 2"}
{"id": "wta_1", "pergunta": "Find the average ranking for each player and their first name.", "sql_esperado": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "sql_gerado": "SELECT first_name, AVG(ranking) FROM player GROUP BY first_name"}
{"id": "wta_1", "pergunta": "What are the first names of all players, and their average rankings?", "sql_esperado": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "sql_gerado": "SELECT first_name, AVG(ranking) FROM player GROUP BY first_name"}
{"id": "wta_1", "pergunta": "Find the total ranking points for each player and their first name.", "sql_esperado": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "sql_gerado": "SELECT first_name, total_ranking_points FROM player"}
{"id": "wta_1", "pergunta": "What are the first names of all players, and their total ranking points?", "sql_esperado": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "sql_gerado": "SELECT first_name, total_ranking_points FROM player"}
{"id": "wta_1", "pergunta": "find the number of players for each country.", "sql_esperado": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "sql_gerado": "SELECT country, COUNT(*) as number_of_players FROM player GROUP BY country"}
{"id": "wta_1", "pergunta": "How many players are from each country?", "sql_esperado": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "sql_gerado": "SELECT country, COUNT(*) as total"}
{"id": "wta_1", "pergunta": "find the code of the country where has the greatest number of players.", "sql_esperado": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT country_code FROM player GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "wta_1", "pergunta": "What is the code of the country with the most players?", "sql_esperado": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT country_code FROM player GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "wta_1", "pergunta": "Find the codes of countries that have more than 50 players.", "sql_esperado": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "sql_gerado": "SELECT country_code FROM player GROUP BY country_code HAVING COUNT(*) > 50"}
{"id": "wta_1", "pergunta": "What are the codes of countries with more than 50 players?", "sql_esperado": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "sql_gerado": "SELECT country_code FROM player GROUP BY country_code HAVING COUNT(*) > 50"}
{"id": "wta_1", "pergunta": "Find the total number of tours for each ranking date.", "sql_esperado": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "sql_gerado": "SELECT ranking_date, COUNT(tour_id) as total_tours FROM tour GROUP BY ranking_date"}
{"id": "wta_1", "pergunta": "How many total tours were there for each ranking date?", "sql_esperado": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "sql_gerado": "SELECT ranking_date, COUNT(tour_id) as total_tours FROM tour GROUP BY ranking_date"}
{"id": "wta_1", "pergunta": "Find the number of matches happened in each year.", "sql_esperado": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "sql_gerado": "SELECT year, COUNT(*) as number_of_matches FROM matches GROUP BY year"}
{"id": "wta_1", "pergunta": "How many matches were played in each year?", "sql_esperado": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "sql_gerado": "SELECT year, COUNT(*) as matches FROM matches GROUP BY year"}
{"id": "wta_1", "pergunta": "Find the name and rank of the 3 youngest winners across all matches.", "sql_esperado": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "sql_gerado": "SELECT name, rank FROM winners ORDER BY age ASC LIMIT 3"}
{"id": "wta_1", "pergunta": "What are the names and ranks of the three youngest winners across all matches?", "sql_esperado": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "sql_gerado": "SELECT name, rank FROM winners ORDER BY age ASC LIMIT 3"}
{"id": "wta_1", "pergunta": "How many different winners both participated in the WTA Championships and were left handed?", "sql_esperado": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "sql_gerado": "SELECT COUNT(*) FROM players WHERE handed = 'left handed' AND championships_participated = 'WTA Championships' GROUP BY player_id HAVING COUNT(*) = 2"}
{"id": "wta_1", "pergunta": "Find the number of left handed winners who participated in the WTA Championships.", "sql_esperado": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "sql_gerado": "SELECT COUNT(*) FROM players WHERE handedness = 'left' AND tournament = 'WTA Championships'"}
{"id": "wta_1", "pergunta": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "sql_esperado": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "sql_gerado": "SELECT first_name, country_code, birth_date FROM players WHERE rank_points_in_matches = (SELECT MAX(rank_points_in_matches) FROM players)"}
{"id": "wta_1", "pergunta": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "sql_esperado": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "sql_gerado": "SELECT first_name, country_code, birth_date FROM player"}
{"id": "wta_1", "pergunta": "Find the number of players for each hand type.", "sql_esperado": "SELECT count(*) ,  hand FROM players GROUP BY hand", "sql_gerado": "SELECT hand_type, COUNT(*) as number_of_players FROM players GROUP BY hand_type"}
{"id": "wta_1", "pergunta": "How many players are there for each hand type?", "sql_esperado": "SELECT count(*) ,  hand FROM players GROUP BY hand", "sql_gerado": "SELECT hand_type, COUNT(*) FROM player GROUP BY hand_type"}
{"id": "battle_death", "pergunta": "How many ships ended up being 'Captured'?", "sql_esperado": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "sql_gerado": "SELECT count(*) FROM ships WHERE status = 'Captured'"}
{"id": "battle_death", "pergunta": "List the name and tonnage ordered by in descending alphaetical order for the names.", "sql_esperado": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "sql_gerado": "SELECT name, tonnage FROM head ORDER BY name DESC"}
{"id": "battle_death", "pergunta": "List the name, date and result of each battle.", "sql_esperado": "SELECT name ,  date FROM battle", "sql_gerado": "SELECT name, battle_date, result FROM battles"}
{"id": "battle_death", "pergunta": "What is maximum and minimum death toll caused each time?", "sql_esperado": "SELECT max(killed) ,  min(killed) FROM death", "sql_gerado": "SELECT MIN(death_toll) AS min_death_toll, MAX(death_toll) AS max_death_toll FROM incident"}
{"id": "battle_death", "pergunta": "What is the average number of injuries caused each time?", "sql_esperado": "SELECT avg(injured) FROM death", "sql_gerado": "SELECT AVG(injuries) FROM incidents"}
{"id": "battle_death", "pergunta": "What are the death and injury situations caused by the ship with tonnage 't'?", "sql_esperado": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "sql_gerado": "SELECT death_count, injury_count FROM ship_incidents WHERE ship_tonnage = 't'"}
{"id": "battle_death", "pergunta": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "sql_esperado": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "sql_gerado": "SELECT name, result FROM battles WHERE commander != 'Boril'"}
{"id": "battle_death", "pergunta": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "sql_esperado": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "sql_gerado": "SELECT battle_id, name FROM battle JOIN ship ON battle.ship_id = ship.id WHERE ship_type = 'Brig' AND ship.status = 'lost' GROUP BY battle_id, name"}
{"id": "battle_death", "pergunta": "What are the ids and names of the battles that led to more than 10 people killed in total.", "sql_esperado": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "sql_gerado": "SELECT id, name FROM battle WHERE total_killed > 10"}
{"id": "battle_death", "pergunta": "What is the ship id and name that caused most total injuries?", "sql_esperado": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT ship_id, name FROM accidents ORDER BY total_injuries DESC LIMIT 1"}
{"id": "battle_death", "pergunta": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "sql_esperado": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "sql_gerado": "SELECT DISTINCT battle_name FROM battle WHERE commander IN ('Kaloyan', 'Baldwin I') ORDER BY battle_name"}
{"id": "battle_death", "pergunta": "How many different results are there for the battles?", "sql_esperado": "SELECT count(DISTINCT RESULT) FROM battle", "sql_gerado": "SELECT COUNT(DISTINCT battle_result) FROM battles"}
{"id": "battle_death", "pergunta": "How many battles did not lose any ship with tonnage '225'?", "sql_esperado": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "sql_gerado": "SELECT count(*) FROM battles WHERE ship_tonnage != '225' AND lost_ship IS NULL"}
{"id": "battle_death", "pergunta": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "sql_esperado": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "sql_gerado": "SELECT name, battle_lost_date FROM ship WHERE name IN ('Lettice', 'HMS Atalanta')"}
{"id": "battle_death", "pergunta": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "sql_esperado": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "sql_gerado": "SELECT names, results, bulgarian_commanders FROM battles WHERE ships_lost = 0 AND battle_location = 'English Channel'"}
{"id": "battle_death", "pergunta": "What are the notes of the death events which has substring 'East'?", "sql_esperado": "SELECT note FROM death WHERE note LIKE '%East%'", "sql_gerado": "SELECT notes FROM death_events WHERE notes LIKE '%East%'"}
{"id": "student_transcripts_tracking", "pergunta": "what are all the addresses including line 1 and line 2?", "sql_esperado": "SELECT line_1 ,  line_2 FROM addresses", "sql_gerado": "SELECT address_line_1, address_line_2 FROM address"}
{"id": "student_transcripts_tracking", "pergunta": "What is the first and second line for all addresses?", "sql_esperado": "SELECT line_1 ,  line_2 FROM addresses", "sql_gerado": "SELECT address_line1, address_line2 FROM addresses; (This query will return all the first and second lines of addresses, but it doesn't specify the order. If you want the first row, you can use LIMIT 1, for the second row, you can use LIMIT 2,1)"}
{"id": "student_transcripts_tracking", "pergunta": "How many courses in total are listed?", "sql_esperado": "SELECT count(*) FROM Courses", "sql_gerado": "SELECT COUNT(*) FROM courses"}
{"id": "student_transcripts_tracking", "pergunta": "How many courses are there?", "sql_esperado": "SELECT count(*) FROM Courses", "sql_gerado": "SELECT COUNT(*) FROM courses"}
{"id": "student_transcripts_tracking", "pergunta": "How is the math course described?", "sql_esperado": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "sql_gerado": ""}
{"id": "student_transcripts_tracking", "pergunta": "What are the descriptions for all the math courses?", "sql_esperado": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "sql_gerado": "SELECT description FROM courses WHERE subject = 'Math'"}
{"id": "student_transcripts_tracking", "pergunta": "What is the zip code of the address in the city Port Chelsea?", "sql_esperado": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "sql_gerado": ""}
{"id": "student_transcripts_tracking", "pergunta": "What is the zip code for Port Chelsea?", "sql_esperado": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "sql_gerado": "SELECT zip_code FROM department WHERE name = 'Port Chelsea'"}
{"id": "student_transcripts_tracking", "pergunta": "Which department offers the most number of degrees? List department name and id.", "sql_esperado": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT department_name, id FROM department"}
{"id": "student_transcripts_tracking", "pergunta": "What is the name and id of the department with the most number of degrees ?", "sql_esperado": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "sql_gerado": "SELECT name, id FROM department WHERE id = (SELECT department_id FROM degree GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)"}
{"id": "student_transcripts_tracking", "pergunta": "How many departments offer any degree?", "sql_esperado": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "sql_gerado": "SELECT COUNT(*) FROM department WHERE has_degree = 1"}
{"id": "student_transcripts_tracking", "pergunta": "How many different departments offer degrees?", "sql_esperado": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "sql_gerado": "SELECT COUNT(DISTINCT degree_offered) FROM department"}
{"id": "student_transcripts_tracking", "pergunta": "How many different degree names are offered?", "sql_esperado": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "sql_gerado": "SELECT COUNT(DISTINCT degree_name) FROM student WHERE degree_name IS NOT NULL"}
{"id": "student_transcripts_tracking", "pergunta": "How many different degrees are offered?", "sql_esperado": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "sql_gerado": "SELECT COUNT(DISTINCT degree) FROM employee"}
{"id": "student_transcripts_tracking", "pergunta": "How many degrees does the engineering department offer?", "sql_esperado": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "sql_gerado": "SELECT COUNT(*) FROM degree WHERE department_id = (SELECT id FROM department WHERE name = 'Engineering')"}
{"id": "student_transcripts_tracking", "pergunta": "How many degrees does the engineering department have?", "sql_esperado": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "sql_gerado": "SELECT COUNT(*) FROM employee WHERE department = 'engineering' AND degree_level > 0"}
{"id": "student_transcripts_tracking", "pergunta": "What are the names and descriptions of all the sections?", "sql_esperado": "SELECT section_name ,  section_description FROM Sections", "sql_gerado": "SELECT name, description FROM section"}
{"id": "student_transcripts_tracking", "pergunta": "What are the names and descriptions for all the sections?", "sql_esperado": "SELECT section_name ,  section_description FROM Sections", "sql_gerado": "SELECT name, description FROM section"}
{"id": "student_transcripts_tracking", "pergunta": "What are the names and id of courses having at most 2 sections?", "sql_esperado": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "sql_gerado": "SELECT name, id FROM course WHERE num_sections <= 2"}
{"id": "student_transcripts_tracking", "pergunta": "What are the names and ids of every course with less than 2 sections?", "sql_esperado": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "sql_gerado": "SELECT name, id FROM course WHERE num_sections < 2"}
{"id": "student_transcripts_tracking", "pergunta": "List the section_name in reversed lexicographical order.", "sql_esperado": "SELECT section_name FROM Sections ORDER BY section_name DESC", "sql_gerado": "SELECT section_name FROM department ORDER BY section_name DESC"}
{"id": "student_transcripts_tracking", "pergunta": "What are the names of the sections in reverse alphabetical order?", "sql_esperado": "SELECT section_name FROM Sections ORDER BY section_name DESC", "sql_gerado": "SELECT name FROM section ORDER BY name DESC"}
{"id": "student_transcripts_tracking", "pergunta": "What is the semester which most student registered in? Show both the name and the id.", "sql_esperado": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT semester, id FROM student_registration GROUP BY semester ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "For each semester, what is the name and id of the one with the most students registered?", "sql_esperado": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT semester, department_id, name"}
{"id": "student_transcripts_tracking", "pergunta": "What is the description of the department whose name has the substring the computer?", "sql_esperado": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "sql_gerado": "SELECT description FROM department WHERE name LIKE '%computer%'"}
{"id": "student_transcripts_tracking", "pergunta": "What is the department description for the one whose name has the word computer?", "sql_esperado": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "sql_gerado": "SELECT description FROM department WHERE name LIKE '%computer%' LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "sql_esperado": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "sql_gerado": "SELECT first_name, middle_name, last_name, id FROM student WHERE num_degrees = 2 AND semester_enrolled IN (1, 2)"}
{"id": "student_transcripts_tracking", "pergunta": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "sql_esperado": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "sql_gerado": "SELECT id, first_name, middle_name, last_name FROM students WHERE num_degrees_in_semester = 2"}
{"id": "student_transcripts_tracking", "pergunta": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "sql_esperado": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "sql_gerado": "SELECT first_name, middle_name, last_name FROM students WHERE degree_program = 'Bachelor'"}
{"id": "student_transcripts_tracking", "pergunta": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "sql_esperado": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "sql_gerado": "SELECT first_name, middle_name, last_name FROM students WHERE program = 'Bachelors'"}
{"id": "student_transcripts_tracking", "pergunta": "Find the kind of program which most number of students are enrolled in?", "sql_esperado": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT program_type, COUNT(student_id) as number_of_students FROM student GROUP BY program_type ORDER BY number_of_students DESC LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "What is the degree summary name that has the most number of students enrolled?", "sql_esperado": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT degree_summary_name FROM enrollment GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "Find the program which most number of students are enrolled in. List both the id and the summary.", "sql_esperado": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT id, summary FROM program ORDER BY COUNT(student.program_id) DESC LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "What is the program id and the summary of the degree that has the most students enrolled?", "sql_esperado": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT program_id, degree_summary"}
{"id": "student_transcripts_tracking", "pergunta": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "sql_esperado": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT id, first_name, middle_name, last_name, COUNT(enrollment_id) as number_of_enrollments"}
{"id": "student_transcripts_tracking", "pergunta": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "sql_esperado": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT first_name, middle_name, last_name, id, enrollments"}
{"id": "student_transcripts_tracking", "pergunta": "Which semesters do not have any student enrolled? List the semester name.", "sql_esperado": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "sql_gerado": "SELECT semester_name FROM semester WHERE student_count = 0"}
{"id": "student_transcripts_tracking", "pergunta": "What is the name of the semester with no students enrolled?", "sql_esperado": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "sql_gerado": "SELECT semester_name FROM semester WHERE enrolled_students = 0"}
{"id": "student_transcripts_tracking", "pergunta": "What are all the course names of the courses which ever have students enrolled in?", "sql_esperado": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "sql_gerado": "SELECT course_name FROM enrollment JOIN courses ON enrollment.course_id = courses.id"}
{"id": "student_transcripts_tracking", "pergunta": "What are the names of all courses that have some students enrolled?", "sql_esperado": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "sql_gerado": "SELECT course_name FROM enrollment JOIN courses ON enrollment.course_id = courses.id"}
{"id": "student_transcripts_tracking", "pergunta": "What's the name of the course with most number of enrollments?", "sql_esperado": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT course_name FROM enrollments GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "What is the name of the course with the most students enrolled?", "sql_esperado": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT course_name FROM enrollment GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "sql_esperado": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "sql_gerado": "SELECT last_name FROM students WHERE state = 'North Carolina' AND degree_program_id IS NULL"}
{"id": "student_transcripts_tracking", "pergunta": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "sql_esperado": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "sql_gerado": "SELECT last_name FROM students WHERE state = 'North Carolina' AND degree_program_id IS NULL"}
{"id": "student_transcripts_tracking", "pergunta": "Show the date and id of the transcript with at least 2 course results.", "sql_esperado": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "sql_gerado": "SELECT id, transcript_date FROM transcript WHERE num_courses >= 2"}
{"id": "student_transcripts_tracking", "pergunta": "What is the date and id of the transcript with at least 2 courses listed?", "sql_esperado": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "sql_gerado": "SELECT id, transcript_date FROM transcript WHERE num_courses >= 2"}
{"id": "student_transcripts_tracking", "pergunta": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "sql_esperado": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "sql_gerado": "SELECT phone_number FROM employee WHERE first_name = 'Timmothy' AND last_name = 'Ward'"}
{"id": "student_transcripts_tracking", "pergunta": "What is the mobile phone number of the student named Timmothy Ward ?", "sql_esperado": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "sql_gerado": "This question is asking for a piece of information that is not typically stored in a database, as mobile phone numbers are personal data and not usually shared publicly. Therefore, it's not possible to write a SQL query for this information."}
{"id": "student_transcripts_tracking", "pergunta": "Who is the first student to register? List the first name, middle name and last name.", "sql_esperado": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "sql_gerado": "SELECT first_name, middle_name, last_name FROM students ORDER BY registration_date LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "What is the first, middle, and last name of the first student to register?", "sql_esperado": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "sql_gerado": "SELECT first_name, middle_name, last_name FROM students"}
{"id": "student_transcripts_tracking", "pergunta": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "sql_esperado": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "sql_gerado": "SELECT first_name, middle_name, last_name FROM graduates ORDER BY birthdate ASC LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "What is the first, middle, and last name of the earliest school graduate?", "sql_esperado": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "sql_gerado": "SELECT first_name, middle_name, last_name FROM graduates ORDER BY graduation_year ASC LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "Whose permanent address is different from his or her current address? List his or her first name.", "sql_esperado": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "sql_gerado": "SELECT first_name FROM head WHERE permanent_address != current_address"}
{"id": "student_transcripts_tracking", "pergunta": "What is the first name of the student whose permanent address is different from his or her current one?", "sql_esperado": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "sql_gerado": "SELECT first_name FROM student WHERE permanent_address != current_address LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "Which address holds the most number of students currently? List the address id and all lines.", "sql_esperado": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT address_id, lines FROM address WHERE address.id = (SELECT address_id FROM student GROUP BY address_id ORDER BY COUNT(*) DESC LIMIT 1)"}
{"id": "student_transcripts_tracking", "pergunta": "What is the id, line 1, and line 2 of the address with the most students?", "sql_esperado": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT id, line_1, line_2 FROM address"}
{"id": "student_transcripts_tracking", "pergunta": "On average, when were the transcripts printed?", "sql_esperado": "SELECT avg(transcript_date) FROM Transcripts", "sql_gerado": "SELECT AVG(print_year) FROM transcript"}
{"id": "student_transcripts_tracking", "pergunta": "What is the average transcript date?", "sql_esperado": "SELECT avg(transcript_date) FROM Transcripts", "sql_gerado": "SELECT AVG(transcript_date) FROM transcript"}
{"id": "student_transcripts_tracking", "pergunta": "When is the first transcript released? List the date and details.", "sql_esperado": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "sql_gerado": "SELECT date_released, details FROM transcript ORDER BY date_released LIMIT 1"}
{"id": "student_transcripts_tracking", "pergunta": "What is the earliest date of a transcript release, and what details can you tell me?", "sql_esperado": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "sql_gerado": "SELECT MIN(release_date) AS \"Earliest Date of Transcript Release\", department_id, head_id, title"}
{"id": "student_transcripts_tracking", "pergunta": "How many transcripts are released?", "sql_esperado": "SELECT count(*) FROM Transcripts", "sql_gerado": "SELECT count(*) FROM transcripts"}
{"id": "student_transcripts_tracking", "pergunta": "How many transcripts are listed?", "sql_esperado": "SELECT count(*) FROM Transcripts", "sql_gerado": "SELECT COUNT(*) FROM transcript"}
{"id": "student_transcripts_tracking", "pergunta": "What is the last transcript release date?", "sql_esperado": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "sql_gerado": "SELECT MAX(release_date) FROM transcript"}
{"id": "student_transcripts_tracking", "pergunta": "When was the last transcript released?", "sql_esperado": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "sql_gerado": "SELECT MAX(release_date) FROM transcript"}
{"id": "student_transcripts_tracking", "pergunta": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "sql_esperado": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT COUNT(DISTINCT course_enrollment_id) as max_occurrences"}
{"id": "student_transcripts_tracking", "pergunta": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "sql_esperado": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT MAX(count) AS max_occurrences, enrollment_id"}
{"id": "student_transcripts_tracking", "pergunta": "Show the date of the transcript which shows the least number of results, also list the id.", "sql_esperado": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "sql_gerado": "SELECT id, MIN(transcript_date) AS least_results_date FROM transcript GROUP BY transcript_date"}
{"id": "student_transcripts_tracking", "pergunta": "What is the date and id of the transcript with the least number of results?", "sql_esperado": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "sql_gerado": "SELECT min(id), min_date FROM transcript GROUP BY id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM transcript)"}
{"id": "student_transcripts_tracking", "pergunta": "Find the semester when both Master students and Bachelor students got enrolled in.", "sql_esperado": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "sql_gerado": "SELECT semester FROM enrollment"}
{"id": "student_transcripts_tracking", "pergunta": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "sql_esperado": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "sql_gerado": "SELECT semester_id FROM enrollment"}
{"id": "student_transcripts_tracking", "pergunta": "How many different addresses do the students currently live?", "sql_esperado": "SELECT count(DISTINCT current_address_id) FROM Students", "sql_gerado": "SELECT COUNT(DISTINCT address) FROM students"}
{"id": "student_transcripts_tracking", "pergunta": "What are the different addresses that have students living there?", "sql_esperado": "SELECT count(DISTINCT current_address_id) FROM Students", "sql_gerado": "SELECT DISTINCT address FROM student"}
{"id": "student_transcripts_tracking", "pergunta": "List all the student details in reversed lexicographical order.", "sql_esperado": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "sql_gerado": "SELECT * FROM student ORDER BY name DESC"}
{"id": "student_transcripts_tracking", "pergunta": "What other details can you tell me about students in reverse alphabetical order?", "sql_esperado": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "sql_gerado": "SELECT * FROM students ORDER BY name DESC"}
{"id": "student_transcripts_tracking", "pergunta": "Describe the section h.", "sql_esperado": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "sql_gerado": "DESCRIBE department WHERE name = 'h'"}
{"id": "student_transcripts_tracking", "pergunta": "What is the description for the section named h?", "sql_esperado": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "sql_gerado": "SELECT description FROM section WHERE name = 'h'"}
{"id": "student_transcripts_tracking", "pergunta": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "sql_esperado": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "sql_gerado": "SELECT first_name FROM students WHERE (country = 'Haiti' OR phone_number = '09700166582')"}
{"id": "student_transcripts_tracking", "pergunta": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "sql_esperado": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "sql_gerado": "SELECT first_name FROM students WHERE country = 'Haiti' OR phone_number = '09700166582'"}
{"id": "tvshow", "pergunta": "List the title of all cartoons in alphabetical order.", "sql_esperado": "SELECT Title FROM Cartoon ORDER BY title", "sql_gerado": "SELECT title FROM cartoon ORDER BY title ASC"}
{"id": "tvshow", "pergunta": "What are the titles of the cartoons sorted alphabetically?", "sql_esperado": "SELECT Title FROM Cartoon ORDER BY title", "sql_gerado": "SELECT title FROM cartoon ORDER BY title ASC"}
{"id": "tvshow", "pergunta": "List all cartoon directed by \"Ben Jones\".", "sql_esperado": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "sql_gerado": "SELECT * FROM cartoon WHERE director = 'Ben Jones'"}
{"id": "tvshow", "pergunta": "What are the names of all cartoons directed by Ben Jones?", "sql_esperado": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "sql_gerado": "SELECT title FROM cartoon WHERE director = 'Ben Jones'"}
{"id": "tvshow", "pergunta": "How many cartoons were written by \"Joseph Kuhr\"?", "sql_esperado": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "sql_gerado": "SELECT COUNT(*) FROM cartoons WHERE writer = 'Joseph Kuhr'"}
{"id": "tvshow", "pergunta": "What is the number of cartoones written by Joseph Kuhr?", "sql_esperado": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "sql_gerado": "SELECT COUNT(*) FROM cartoons WHERE writer = 'Joseph Kuhr'"}
{"id": "tvshow", "pergunta": "list all cartoon titles and their directors ordered by their air date", "sql_esperado": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "sql_gerado": "SELECT title, director, air_date FROM cartoons ORDER BY air_date"}
{"id": "tvshow", "pergunta": "What is the name and directors of all the cartoons that are ordered by air date?", "sql_esperado": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "sql_gerado": "SELECT name, director FROM cartoon ORDER BY air_date"}
{"id": "tvshow", "pergunta": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "sql_esperado": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "sql_gerado": "SELECT title FROM cartoon WHERE director IN ('Ben Jones', 'Brandon Vietti')"}
{"id": "tvshow", "pergunta": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "sql_esperado": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "sql_gerado": "SELECT title FROM cartoons WHERE director IN ('Ben Jones', 'Brandon Vietti')"}
{"id": "tvshow", "pergunta": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "sql_esperado": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "sql_gerado": "SELECT country, COUNT(*) as num_channels FROM channel GROUP BY country ORDER BY num_channels DESC LIMIT 1"}
{"id": "tvshow", "pergunta": "What is the country with the most number of TV Channels and how many does it have?", "sql_esperado": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "sql_gerado": "SELECT country, COUNT(*) as channel_count FROM channel GROUP BY country ORDER BY channel_count DESC LIMIT 1"}
{"id": "tvshow", "pergunta": "List the number of different series names and contents in the TV Channel table.", "sql_esperado": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "sql_gerado": "SELECT COUNT(DISTINCT series_name), content FROM TV_Channel GROUP BY series_name"}
{"id": "tvshow", "pergunta": "How many different series and contents are listed in the TV Channel table?", "sql_esperado": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "sql_gerado": "SELECT COUNT(DISTINCT series_id, content_id) FROM TV_Channel"}
{"id": "tvshow", "pergunta": "What is the content of TV Channel with serial name \"Sky Radio\"?", "sql_esperado": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "sql_gerado": "SELECT content FROM channel WHERE serial_name = \"Sky Radio\""}
{"id": "tvshow", "pergunta": "What is the content of the series Sky Radio?", "sql_esperado": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "sql_gerado": "This question is not about SQL, it's about the content of a media item (in this case, a radio series). SQL is a language used for managing and manipulating databases, not for retrieving content from media files. To find the content of a media item, you would typically use a media player or a media management software, not SQL."}
{"id": "tvshow", "pergunta": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "sql_esperado": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "sql_gerado": "SELECT package_option FROM tv_channel WHERE serial_name = 'Sky Radio'"}
{"id": "tvshow", "pergunta": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "sql_esperado": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "sql_gerado": "SELECT package_options FROM tv_channel WHERE series_name = 'Sky Radio'"}
{"id": "tvshow", "pergunta": "How many TV Channel using language English?", "sql_esperado": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "sql_gerado": "SELECT count(*) FROM channel WHERE language = 'English'"}
{"id": "tvshow", "pergunta": "How many TV Channels use the English language?", "sql_esperado": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "sql_gerado": "SELECT COUNT(*) FROM channel WHERE language = 'English'"}
{"id": "tvshow", "pergunta": "List the language used least number of TV Channel. List language and number of TV Channel.", "sql_esperado": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "sql_gerado": "SELECT language, COUNT(channel_id) as channel_count"}
{"id": "tvshow", "pergunta": "What are the languages used by the least number of TV Channels and how many channels use it?", "sql_esperado": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "sql_gerado": "SELECT language, COUNT(*) as channel_count FROM channel GROUP BY language ORDER BY channel_count ASC LIMIT 1"}
{"id": "tvshow", "pergunta": "List each language and the number of TV Channels using it.", "sql_esperado": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "sql_gerado": "SELECT language, COUNT(channel_id) as num_channels FROM channel GROUP BY language"}
{"id": "tvshow", "pergunta": "For each language, list the number of TV Channels that use it.", "sql_esperado": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "sql_gerado": "SELECT language, COUNT(channel_id) as num_channels FROM channel GROUP BY language"}
{"id": "tvshow", "pergunta": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "sql_esperado": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "sql_gerado": "SELECT channel_name FROM show WHERE title = \"The Rise of the Blue Beetle!\""}
{"id": "tvshow", "pergunta": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "sql_esperado": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "sql_gerado": "This question is not about SQL, it's about retrieving data from a database. SQL can't answer questions about TV shows or channels. However, if we assume that the TV show information is stored in a database, the SQL query could look like this:"}
{"id": "tvshow", "pergunta": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "sql_esperado": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "sql_gerado": "SELECT title FROM cartoons WHERE tv_channel = 'Sky Radio' AND series_name = 'Sky Radio'"}
{"id": "tvshow", "pergunta": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "sql_esperado": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "sql_gerado": "SELECT title FROM cartoon WHERE tv_channel = 'Sky Radio' AND series_name = 'Sky Radio'"}
{"id": "tvshow", "pergunta": "List the Episode of all TV series sorted by rating.", "sql_esperado": "SELECT Episode FROM TV_series ORDER BY rating", "sql_gerado": "SELECT episode, rating FROM tv_series ORDER BY rating"}
{"id": "tvshow", "pergunta": "What are all of the episodes ordered by ratings?", "sql_esperado": "SELECT Episode FROM TV_series ORDER BY rating", "sql_gerado": "SELECT * FROM episodes ORDER BY ratings"}
{"id": "tvshow", "pergunta": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "sql_esperado": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "sql_gerado": "SELECT title, episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3"}
{"id": "tvshow", "pergunta": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "sql_esperado": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "sql_gerado": "SELECT episode_name, rating FROM tv_series ORDER BY rating DESC LIMIT 3"}
{"id": "tvshow", "pergunta": "What is minimum and maximum share of TV series?", "sql_esperado": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "sql_gerado": "SELECT MIN(share) AS 'Minimum Share', MAX(share) AS 'Maximum Share' FROM tv_series"}
{"id": "tvshow", "pergunta": "What is the maximum and minimum share for the TV series?", "sql_esperado": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "sql_gerado": "SELECT MAX(share) AS Max_Share, MIN(share) AS Min_Share FROM tv_series"}
{"id": "tvshow", "pergunta": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "sql_esperado": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "sql_gerado": "SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime'"}
{"id": "tvshow", "pergunta": "When did the episode \"A Love of a Lifetime\" air?", "sql_esperado": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "sql_gerado": ""}
{"id": "tvshow", "pergunta": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "sql_esperado": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "sql_gerado": ""}
{"id": "tvshow", "pergunta": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "sql_esperado": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "sql_gerado": ""}
{"id": "tvshow", "pergunta": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "sql_esperado": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "sql_gerado": "SELECT channel, series_name FROM tv_series WHERE episode = 'A Love of a Lifetime'"}
{"id": "tvshow", "pergunta": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "sql_esperado": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "sql_gerado": "This question is not about SQL, it's about retrieving data from a database. SQL can't directly answer this question as it's not a query. However, if the database has a table named `episodes` and the `title` column, you could find the series name with the episode \"A Love of a Lifetime\" like this:"}
{"id": "tvshow", "pergunta": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "sql_esperado": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "sql_gerado": "SELECT episode FROM tv_series WHERE channel = 'Sky Radio' AND series_name = 'Sky Radio'"}
{"id": "tvshow", "pergunta": "What is the episode for the TV series named \"Sky Radio\"?", "sql_esperado": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "sql_gerado": "SELECT episode FROM episodes WHERE series_name = \"Sky Radio\""}
{"id": "tvshow", "pergunta": "Find the number of cartoons directed by each of the listed directors.", "sql_esperado": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "sql_gerado": "SELECT director_name, COUNT(*) as number_of_cartoons"}
{"id": "tvshow", "pergunta": "How many cartoons did each director create?", "sql_esperado": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "sql_gerado": "SELECT director_id, COUNT(cartoon_id) FROM cartoon GROUP BY director_id"}
{"id": "tvshow", "pergunta": "Find the production code and channel of the most recently aired cartoon .", "sql_esperado": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "sql_gerado": "SELECT production_code, channel FROM cartoon ORDER BY aired_date DESC LIMIT 1"}
{"id": "tvshow", "pergunta": "What is the produdction code and channel of the most recent cartoon ?", "sql_esperado": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "sql_gerado": "SELECT production_code, channel FROM cartoon ORDER BY creation DESC LIMIT 1"}
{"id": "tvshow", "pergunta": "Find the package choice and series name of the TV channel that has high definition TV.", "sql_esperado": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "sql_gerado": "SELECT package, channel_name FROM tv_channel WHERE has_high_definition = 1"}
{"id": "tvshow", "pergunta": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "sql_esperado": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "sql_gerado": "SELECT package_options, series_name FROM tv_channel WHERE supports_hd_tv = 1"}
{"id": "tvshow", "pergunta": "which countries' tv channels are playing some cartoon written by Todd Casey?", "sql_esperado": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "sql_gerado": "SELECT c.country, t.channel_name"}
{"id": "tvshow", "pergunta": "What are the countries that have cartoons on TV that were written by Todd Casey?", "sql_esperado": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "sql_gerado": "SELECT born_country FROM writer WHERE writer_name = 'Todd Casey' AND job_type = 'cartoon writer'"}
{"id": "tvshow", "pergunta": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql_esperado": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "sql_gerado": "SELECT c.country"}
{"id": "tvshow", "pergunta": "What are the countries that are not playing cartoons written by Todd Casey?", "sql_esperado": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "sql_gerado": "SELECT distinct born_country FROM animation WHERE writer <> 'Todd Casey' AND genre <> 'cartoons'"}
{"id": "tvshow", "pergunta": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql_esperado": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "sql_gerado": ""}
{"id": "tvshow", "pergunta": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql_esperado": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "sql_gerado": "SELECT channel_name, country FROM channel"}
{"id": "tvshow", "pergunta": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql_esperado": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "sql_gerado": "SELECT pixel_aspect_ratio, nation FROM tv_channel WHERE language != 'English'"}
{"id": "tvshow", "pergunta": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "sql_esperado": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "sql_gerado": "SELECT pixel_aspect_ratio, country_of_origin FROM tv_channel WHERE language != 'English'"}
{"id": "tvshow", "pergunta": "find id of the tv channels that from the countries where have more than two tv channels.", "sql_esperado": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "sql_gerado": "SELECT id FROM channel GROUP BY country HAVING COUNT(*) > 2"}
{"id": "tvshow", "pergunta": "What are the ids of all tv channels that have more than 2 TV channels?", "sql_esperado": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "sql_gerado": "SELECT id FROM channel WHERE num_channels > 2"}
{"id": "tvshow", "pergunta": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "sql_esperado": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "sql_gerado": "SELECT channel_id FROM channel JOIN cartoon ON channel.channel_id = cartoon.channel_id WHERE director != 'Ben Jones' AND cartoon.director IS NOT NULL"}
{"id": "tvshow", "pergunta": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "sql_esperado": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "sql_gerado": "SELECT channel_id FROM channel WHERE director != 'Ben Jones' AND cartoon IS NOT NULL AND cartoon_director != 'Ben Jones'"}
{"id": "tvshow", "pergunta": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "sql_esperado": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "sql_gerado": "SELECT package_option FROM tv_channel WHERE cartoon NOT IN (SELECT cartoon FROM cartoon_directed_by WHERE director = 'Ben Jones')"}
{"id": "tvshow", "pergunta": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "sql_esperado": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "sql_gerado": "SELECT package_options FROM tv_channel WHERE cartoon_director <> 'Ben Jones'"}
{"id": "poker_player", "pergunta": "How many poker players are there?", "sql_esperado": "SELECT count(*) FROM poker_player", "sql_gerado": "SELECT COUNT(*) FROM players WHERE game = 'poker'"}
{"id": "poker_player", "pergunta": "Count the number of poker players.", "sql_esperado": "SELECT count(*) FROM poker_player", "sql_gerado": "SELECT COUNT(*) FROM players WHERE game = 'poker'"}
{"id": "poker_player", "pergunta": "List the earnings of poker players in descending order.", "sql_esperado": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "sql_gerado": "SELECT earnings FROM players WHERE game = 'poker' ORDER BY earnings DESC"}
{"id": "poker_player", "pergunta": "What are the earnings of poker players, ordered descending by value?", "sql_esperado": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "sql_gerado": "SELECT earnings, name FROM player WHERE game = 'poker' ORDER BY earnings DESC"}
{"id": "poker_player", "pergunta": "List the final tables made and the best finishes of poker players.", "sql_esperado": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "sql_gerado": "SELECT final_table, best_finish FROM poker_players"}
{"id": "poker_player", "pergunta": "What are the final tables made and best finishes for all poker players?", "sql_esperado": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "sql_gerado": "SELECT final_table, best_finish FROM poker_players"}
{"id": "poker_player", "pergunta": "What is the average earnings of poker players?", "sql_esperado": "SELECT avg(Earnings) FROM poker_player", "sql_gerado": "SELECT AVG(earnings) FROM player WHERE game = 'poker'"}
{"id": "poker_player", "pergunta": "Return the average earnings across all poker players.", "sql_esperado": "SELECT avg(Earnings) FROM poker_player", "sql_gerado": "SELECT AVG(earnings) FROM player WHERE game = 'poker'"}
{"id": "poker_player", "pergunta": "What is the money rank of the poker player with the highest earnings?", "sql_esperado": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "sql_gerado": "SELECT rank() OVER (ORDER BY earnings DESC) FROM players WHERE game = 'poker' LIMIT 1"}
{"id": "poker_player", "pergunta": "Return the money rank of the player with the greatest earnings.", "sql_esperado": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "sql_gerado": "SELECT money_rank FROM player ORDER BY earnings DESC LIMIT 1"}
{"id": "poker_player", "pergunta": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "sql_esperado": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "sql_gerado": "SELECT COUNT(*) FROM poker_player WHERE earnings < 200000 AND final_table_made IS NOT NULL"}
{"id": "poker_player", "pergunta": "Return the maximum final tables made across all poker players who have earnings below 200000.", "sql_esperado": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "sql_gerado": "SELECT MAX(final_table) FROM poker_player WHERE earnings < 200000"}
{"id": "poker_player", "pergunta": "What are the names of poker players?", "sql_esperado": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "sql_gerado": "SELECT name FROM player WHERE game = 'poker'"}
{"id": "poker_player", "pergunta": "Return the names of all the poker players.", "sql_esperado": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "sql_gerado": "SELECT name FROM player WHERE game = 'poker'"}
{"id": "poker_player", "pergunta": "What are the names of poker players whose earnings is higher than 300000?", "sql_esperado": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "sql_gerado": "SELECT name FROM poker_players WHERE earnings > 300000"}
{"id": "poker_player", "pergunta": "Give the names of poker players who have earnings above 300000.", "sql_esperado": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "sql_gerado": "SELECT name FROM poker_players WHERE earnings > 300000"}
{"id": "poker_player", "pergunta": "List the names of poker players ordered by the final tables made in ascending order.", "sql_esperado": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "sql_gerado": "SELECT name FROM player ORDER BY final_tables_made ASC"}
{"id": "poker_player", "pergunta": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "sql_esperado": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "sql_gerado": "SELECT name FROM player ORDER BY num_final_tables ASC"}
{"id": "poker_player", "pergunta": "What is the birth date of the poker player with the lowest earnings?", "sql_esperado": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "sql_gerado": "SELECT birth_date FROM players WHERE game = 'poker' AND earnings = (SELECT MIN(earnings) FROM players WHERE game = 'poker')"}
{"id": "poker_player", "pergunta": "Return the birth date of the poker player with the lowest earnings.", "sql_esperado": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "sql_gerado": "SELECT birth_date FROM players WHERE game = 'poker' AND earnings = (SELECT MIN(earnings) FROM players WHERE game = 'poker')"}
{"id": "poker_player", "pergunta": "What is the money rank of the tallest poker player?", "sql_esperado": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "sql_gerado": ""}
{"id": "poker_player", "pergunta": "Return the money rank of the poker player with the greatest height.", "sql_esperado": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "sql_gerado": "SELECT poker_player.money_rank"}
{"id": "poker_player", "pergunta": "What is the average earnings of poker players with height higher than 200?", "sql_esperado": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "sql_gerado": "SELECT AVG(earnings) FROM player WHERE height > 200 AND game = 'poker'"}
{"id": "poker_player", "pergunta": "Give average earnings of poker players who are taller than 200.", "sql_esperado": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "sql_gerado": "SELECT AVG(earnings) FROM player WHERE height > 200 AND game = 'poker'"}
{"id": "poker_player", "pergunta": "What are the names of poker players in descending order of earnings?", "sql_esperado": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "sql_gerado": "SELECT name FROM player ORDER BY earnings DESC"}
{"id": "poker_player", "pergunta": "Return the names of poker players sorted by their earnings descending.", "sql_esperado": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "sql_gerado": "SELECT name FROM player ORDER BY earnings DESC"}
{"id": "poker_player", "pergunta": "What are different nationalities of people and the corresponding number of people from each nation?", "sql_esperado": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "sql_gerado": "SELECT nationality, COUNT(*) as number_of_people FROM people GROUP BY nationality"}
{"id": "poker_player", "pergunta": "How many people are there of each nationality?", "sql_esperado": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "sql_gerado": "SELECT nationality, COUNT(*) as count FROM people GROUP BY nationality"}
{"id": "poker_player", "pergunta": "What is the most common nationality of people?", "sql_esperado": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": "SELECT mode(nationality) AS most_common_nationality FROM people"}
{"id": "poker_player", "pergunta": "Give the nationality that is most common across all people.", "sql_esperado": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": "SELECT mode(nationality) AS most_common_nationality FROM people"}
{"id": "poker_player", "pergunta": "What are the nationalities that are shared by at least two people?", "sql_esperado": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "sql_gerado": "SELECT country FROM employee GROUP BY country HAVING COUNT(*) > 1"}
{"id": "poker_player", "pergunta": "Return the nationalities for which there are two or more people.", "sql_esperado": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "sql_gerado": "SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) > 1"}
{"id": "poker_player", "pergunta": "List the names and birth dates of people in ascending alphabetical order of name.", "sql_esperado": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "sql_gerado": "SELECT name, birth_date FROM people ORDER BY name ASC"}
{"id": "poker_player", "pergunta": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql_esperado": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "sql_gerado": "SELECT name, birth_date FROM people ORDER BY name"}
{"id": "poker_player", "pergunta": "Show names of people whose nationality is not \"Russia\".", "sql_esperado": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "sql_gerado": "SELECT name FROM people WHERE nationality != 'Russia'"}
{"id": "poker_player", "pergunta": "What are the names of people who are not from Russia?", "sql_esperado": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "sql_gerado": "SELECT name FROM head WHERE born_state != 'Russia'"}
{"id": "poker_player", "pergunta": "List the names of people that are not poker players.", "sql_esperado": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "sql_gerado": "SELECT name FROM people WHERE is_poker_player = false"}
{"id": "poker_player", "pergunta": "What are the names of people who do not play poker?", "sql_esperado": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "sql_gerado": "SELECT name FROM people WHERE does_not_play_poker = true"}
{"id": "poker_player", "pergunta": "How many distinct nationalities are there?", "sql_esperado": "SELECT count(DISTINCT Nationality) FROM people", "sql_gerado": "SELECT COUNT(DISTINCT nationality) FROM employees"}
{"id": "poker_player", "pergunta": "Count the number of different nationalities.", "sql_esperado": "SELECT count(DISTINCT Nationality) FROM people", "sql_gerado": "SELECT COUNT(DISTINCT nationality) FROM head"}
{"id": "voter_1", "pergunta": "How many states are there?", "sql_esperado": "SELECT count(*) FROM area_code_state", "sql_gerado": "SELECT COUNT(DISTINCT born_state) FROM head"}
{"id": "voter_1", "pergunta": "List the contestant numbers and names, ordered by contestant name descending.", "sql_esperado": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "sql_gerado": "SELECT contestant_number, name FROM contestant ORDER BY name DESC"}
{"id": "voter_1", "pergunta": "List the vote ids, phone numbers and states of all votes.", "sql_esperado": "SELECT vote_id ,  phone_number ,  state FROM votes", "sql_gerado": "SELECT vote_id, phone_number, state FROM votes"}
{"id": "voter_1", "pergunta": "What are the maximum and minimum values of area codes?", "sql_esperado": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "sql_gerado": "SELECT MIN(area_code) AS min_value, MAX(area_code) AS max_value FROM department"}
{"id": "voter_1", "pergunta": "What is last date created of votes from the state 'CA'?", "sql_esperado": "SELECT max(created) FROM votes WHERE state  =  'CA'", "sql_gerado": "SELECT MAX(vote_date) FROM votes WHERE state = 'CA'"}
{"id": "voter_1", "pergunta": "What are the names of the contestants whose names are not 'Jessie Alloway'", "sql_esperado": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "sql_gerado": "SELECT name FROM head WHERE name != 'Jessie Alloway'"}
{"id": "voter_1", "pergunta": "What are the distinct states and create time of all votes?", "sql_esperado": "SELECT DISTINCT state ,  created FROM votes", "sql_gerado": "SELECT DISTINCT born_state, creation_time FROM vote"}
{"id": "voter_1", "pergunta": "What are the contestant numbers and names of the contestants who had at least two votes?", "sql_esperado": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "sql_gerado": "SELECT contestant_number, name FROM contestants WHERE votes > 2"}
{"id": "voter_1", "pergunta": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "sql_esperado": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "sql_gerado": "SELECT contestant_number, name FROM contestant ORDER BY votes ASC LIMIT 1"}
{"id": "voter_1", "pergunta": "What are the number of votes from state 'NY' or 'CA'?", "sql_esperado": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "sql_gerado": "SELECT SUM(votes) FROM votes WHERE state IN ('NY', 'CA')"}
{"id": "voter_1", "pergunta": "How many contestants did not get voted?", "sql_esperado": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "sql_gerado": "SELECT COUNT(*) FROM contestant WHERE votes_received IS NULL"}
{"id": "voter_1", "pergunta": "What is the area code in which the most voters voted?", "sql_esperado": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT area_code FROM votes GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "voter_1", "pergunta": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "sql_esperado": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "sql_gerado": "SELECT creation_date, state, phone_number FROM votes WHERE contestant = 'Tabatha Gehling'"}
{"id": "voter_1", "pergunta": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "sql_esperado": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "sql_gerado": "SELECT area_code FROM voter"}
{"id": "voter_1", "pergunta": "Return the names of the contestants whose names contain the substring 'Al' .", "sql_esperado": "select contestant_name from contestants where contestant_name like \"%al%\"", "sql_gerado": "SELECT name FROM contestant WHERE name LIKE '%Al%'"}
{"id": "world_1", "pergunta": "What are the names of all the countries that became independent after 1950?", "sql_esperado": "SELECT Name FROM country WHERE IndepYear  >  1950", "sql_gerado": "SELECT country_name FROM independence WHERE year > 1950"}
{"id": "world_1", "pergunta": "Give the names of the nations that were founded after 1950.", "sql_esperado": "SELECT Name FROM country WHERE IndepYear  >  1950", "sql_gerado": "SELECT name FROM nation WHERE creation_year > 1950"}
{"id": "world_1", "pergunta": "How many countries have a republic as their form of government?", "sql_esperado": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "sql_gerado": "SELECT COUNT(*) FROM country WHERE form_of_government = 'republic'"}
{"id": "world_1", "pergunta": "How many countries have governments that are republics?", "sql_esperado": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "sql_gerado": "SELECT COUNT(*) FROM government WHERE type = 'republic'"}
{"id": "world_1", "pergunta": "What is the total surface area of the countries in the Caribbean region?", "sql_esperado": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "sql_gerado": "SELECT SUM(surface_area) FROM country WHERE region = 'Caribbean'"}
{"id": "world_1", "pergunta": "How much surface area do the countires in the Carribean cover together?", "sql_esperado": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Which continent is Anguilla in?", "sql_esperado": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "sql_gerado": "This question is not about SQL, it's about geography. To find the continent of Anguilla, you would look it up in a geographical database or an API, not SQL. However, if you have a table named 'countries' in your database with columns 'name' and 'continent', you could use SQL to find the continent of Anguilla like this:"}
{"id": "world_1", "pergunta": "What is the continent name which Anguilla belongs to?", "sql_esperado": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "sql_gerado": "SELECT continent FROM country WHERE name = 'Anguilla'"}
{"id": "world_1", "pergunta": "Which region is the city Kabul located in?", "sql_esperado": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "sql_gerado": "SELECT region FROM city WHERE name = 'Kabul'"}
{"id": "world_1", "pergunta": "What region is Kabul in?", "sql_esperado": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "sql_gerado": "SELECT region FROM department WHERE name = 'Kabul'"}
{"id": "world_1", "pergunta": "Which language is the most popular in Aruba?", "sql_esperado": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "sql_gerado": ""}
{"id": "world_1", "pergunta": "What language is predominantly spoken in Aruba?", "sql_esperado": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "sql_gerado": ""}
{"id": "world_1", "pergunta": "What are the population and life expectancies in Brazil?", "sql_esperado": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "sql_gerado": "SELECT population, life_expectancy FROM country WHERE name = 'Brazil'"}
{"id": "world_1", "pergunta": "Give me Brazil’s population and life expectancies.", "sql_esperado": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "sql_gerado": "SELECT population, life_expectancy FROM country WHERE name = 'Brazil'"}
{"id": "world_1", "pergunta": "What are the region and population of Angola?", "sql_esperado": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "sql_gerado": "SELECT region, population FROM country WHERE name = 'Angola'"}
{"id": "world_1", "pergunta": "What region does Angola belong to and what is its population?", "sql_esperado": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "sql_gerado": "SELECT region, population FROM country WHERE name = 'Angola'"}
{"id": "world_1", "pergunta": "What is the average expected life expectancy for countries in the region of Central Africa?", "sql_esperado": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "sql_gerado": ""}
{"id": "world_1", "pergunta": "How long is the people’s average life expectancy in Central Africa?", "sql_esperado": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "sql_gerado": "SELECT AVG(age) FROM head WHERE born_state LIKE 'Central Africa%'"}
{"id": "world_1", "pergunta": "What is the name of country that has the shortest life expectancy in Asia?", "sql_esperado": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "sql_gerado": "This question is not directly related to SQL, as it requires statistical data that is not typically stored in a database. SQL is used for managing and manipulating data within a database, not for gathering or analyzing external data. To find the answer, you would need to use a different tool or API that provides life expectancy data for countries. For example, if you have a table named 'countries' with columns 'name', 'continent', and 'life_expectancy', you could find the country with the shortest life expectancy in Asia with:"}
{"id": "world_1", "pergunta": "Give the name of the country in Asia with the lowest life expectancy.", "sql_esperado": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "sql_gerado": "SELECT min(life_expectancy) as \"Lowest Life Expectancy\", country FROM country WHERE continent = 'Asia' GROUP BY country"}
{"id": "world_1", "pergunta": "What is the total population and maximum GNP in Asia?", "sql_esperado": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "sql_gerado": "SELECT SUM(population) AS total_population, MAX(GNP) AS max_gnp FROM country WHERE continent = 'Asia'"}
{"id": "world_1", "pergunta": "How many people live in Asia, and what is the largest GNP among them?", "sql_esperado": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "sql_gerado": "SELECT COUNT(*) as total_people, MAX(gnp) as largest_gnp FROM person WHERE continent = 'Asia'"}
{"id": "world_1", "pergunta": "What is the average life expectancy in African countries that are republics?", "sql_esperado": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Give the average life expectancy for countries in Africa which are republics?", "sql_esperado": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "sql_gerado": "SELECT AVG(life_expectancy) FROM country WHERE continent = 'Africa' AND type = 'republic'"}
{"id": "world_1", "pergunta": "What is the total surface area of the continents Asia and Europe?", "sql_esperado": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "sql_gerado": "This question is not about SQL, but about geography. SQL is a language used for managing and manipulating databases, not for calculating geographical data. To find the total surface area of continents, you would need to use a different tool or API that provides geographical data. For example, you could use a REST API like GeoNames (https://www.geonames.org/). However, SQL can be used to calculate the total budget of departments if you have that data in a database."}
{"id": "world_1", "pergunta": "Give the total surface area covered by countries in Asia or Europe.", "sql_esperado": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "sql_gerado": "SELECT SUM(surface_area) FROM country WHERE continent IN ('Asia', 'Europe')"}
{"id": "world_1", "pergunta": "How many people live in Gelderland district?", "sql_esperado": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "sql_gerado": "SELECT COUNT(*) FROM people WHERE district = 'Gelderland'"}
{"id": "world_1", "pergunta": "What is the total population of Gelderland district?", "sql_esperado": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "sql_gerado": "SELECT population FROM district WHERE name = 'Gelderland'"}
{"id": "world_1", "pergunta": "What is the average GNP and total population in all nations whose government is US territory?", "sql_esperado": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "sql_gerado": "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM nation WHERE government = 'US territory'"}
{"id": "world_1", "pergunta": "Give the mean GNP and total population of nations which are considered US territory.", "sql_esperado": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "sql_gerado": "SELECT AVG(gnp) AS Mean_GNP, SUM(population) AS Total_Population FROM nation WHERE is_us_territory = 1"}
{"id": "world_1", "pergunta": "How many unique languages are spoken in the world?", "sql_esperado": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "sql_gerado": "SELECT COUNT(DISTINCT language) FROM languages"}
{"id": "world_1", "pergunta": "What is the number of distinct languages used around the world?", "sql_esperado": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "sql_gerado": "SELECT COUNT(DISTINCT language) FROM languages"}
{"id": "world_1", "pergunta": "How many type of governments are in Africa?", "sql_esperado": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "sql_gerado": "SELECT COUNT(DISTINCT government_type) FROM department WHERE continent = 'Africa'"}
{"id": "world_1", "pergunta": "How many different forms of governments are there in Africa?", "sql_esperado": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "sql_gerado": "SELECT COUNT(DISTINCT government_type) FROM country WHERE continent = 'Africa' AND type = 'Country'"}
{"id": "world_1", "pergunta": "What is the total number of languages used in Aruba?", "sql_esperado": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "sql_gerado": "SELECT COUNT(DISTINCT language) FROM language_used WHERE location = 'Aruba'"}
{"id": "world_1", "pergunta": "How many languages are spoken in Aruba?", "sql_esperado": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "sql_gerado": "SELECT COUNT(*) FROM language WHERE country = 'Aruba'"}
{"id": "world_1", "pergunta": "How many official languages does Afghanistan have?", "sql_esperado": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "sql_gerado": "SELECT COUNT(*) FROM country WHERE name = 'Afghanistan' AND official_languages IS NOT NULL"}
{"id": "world_1", "pergunta": "How many official languages are spoken in Afghanistan?", "sql_esperado": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "sql_gerado": "SELECT COUNT(*) FROM country WHERE name = 'Afghanistan' AND official_languages IS NOT NULL"}
{"id": "world_1", "pergunta": "What is name of the country that speaks the largest number of languages?", "sql_esperado": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Give the name of the nation that uses the greatest amount of languages.", "sql_esperado": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Which continent has the most diverse languages?", "sql_esperado": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": "This question is not about SQL, it's about data analysis. SQL can't determine the most diverse continent based on data. You would need to analyze the data and find the continent with the most unique languages, then return that information. However, SQL can help you find the unique languages per continent."}
{"id": "world_1", "pergunta": "Which continent speaks the most languages?", "sql_esperado": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": ""}
{"id": "world_1", "pergunta": "How many countries speak both English and Dutch?", "sql_esperado": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "sql_gerado": "SELECT COUNT(*) FROM language WHERE country_name IN (SELECT country_name FROM language WHERE language = 'English') AND language = 'Dutch'"}
{"id": "world_1", "pergunta": "What is the number of nations that use English and Dutch?", "sql_esperado": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "sql_gerado": "SELECT COUNT(*) FROM nation WHERE language IN ('English', 'Dutch')"}
{"id": "world_1", "pergunta": "What are the names of nations speak both English and French?", "sql_esperado": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "sql_gerado": "SELECT nations.name"}
{"id": "world_1", "pergunta": "Give the names of nations that speak both English and French.", "sql_esperado": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "sql_gerado": ""}
{"id": "world_1", "pergunta": "What are the names of nations where both English and French are official languages?", "sql_esperado": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "sql_gerado": "SELECT nations.name"}
{"id": "world_1", "pergunta": "Give the names of countries with English and French as official languages.", "sql_esperado": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "sql_gerado": "SELECT country_name FROM language WHERE language = 'English' AND language = 'French'"}
{"id": "world_1", "pergunta": "What is the number of distinct continents where Chinese is spoken?", "sql_esperado": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "sql_gerado": "SELECT COUNT(DISTINCT born_continent) FROM head WHERE spoken_language = 'Chinese'"}
{"id": "world_1", "pergunta": "How many continents speak Chinese?", "sql_esperado": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "sql_gerado": ""}
{"id": "world_1", "pergunta": "What are the regions that use English or Dutch?", "sql_esperado": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "sql_gerado": "SELECT region FROM language WHERE language = 'English' OR language = 'Dutch'"}
{"id": "world_1", "pergunta": "Which regions speak Dutch or English?", "sql_esperado": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "sql_gerado": "SELECT region FROM head WHERE language IN ('Dutch', 'English')"}
{"id": "world_1", "pergunta": "What are the countries where either English or Dutch is the official language ?", "sql_esperado": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "sql_gerado": "SELECT country FROM language WHERE language = 'English' OR language = 'Dutch'"}
{"id": "world_1", "pergunta": "Which countries have either English or Dutch as an official language?", "sql_esperado": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "sql_gerado": "SELECT country FROM language WHERE language = 'English' OR language = 'Dutch'"}
{"id": "world_1", "pergunta": "Which language is the most popular on the Asian continent?", "sql_esperado": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "sql_gerado": ""}
{"id": "world_1", "pergunta": "What is the language that is used by the largest number of Asian nations?", "sql_esperado": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Which languages are spoken by only one country in republic governments?", "sql_esperado": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "sql_gerado": ""}
{"id": "world_1", "pergunta": "What languages are only used by a single country with a republic government?", "sql_esperado": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "sql_gerado": "SELECT language FROM languages_used"}
{"id": "world_1", "pergunta": "Find the city with the largest population that uses English.", "sql_esperado": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "sql_gerado": "SELECT city, population, language FROM city WHERE language = 'English' ORDER BY population DESC LIMIT 1"}
{"id": "world_1", "pergunta": "What is the most populace city that speaks English?", "sql_esperado": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "sql_gerado": "SELECT city, COUNT(*) as population FROM residents WHERE language = 'English' GROUP BY city ORDER BY population DESC LIMIT 1"}
{"id": "world_1", "pergunta": "Find the name, population and expected life length of asian country with the largest area?", "sql_esperado": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "sql_gerado": "SELECT name, population, life_length FROM country WHERE continent = 'Asia' AND area = (SELECT MAX(area) FROM country WHERE continent = 'Asia' AND continent = 'Asia')"}
{"id": "world_1", "pergunta": "What are the name, population, and life expectancy of the largest Asian country by land?", "sql_esperado": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "sql_gerado": "SELECT name, population, life_expectancy FROM country WHERE continent = 'Asia' AND population = (SELECT MAX(population) FROM country WHERE continent = 'Asia' AND continent = 'Asia')"}
{"id": "world_1", "pergunta": "What is average life expectancy in the countries where English is not the official language?", "sql_esperado": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Give the mean life expectancy of countries in which English is not the official language.", "sql_esperado": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "sql_gerado": ""}
{"id": "world_1", "pergunta": "What is the total number of people living in the nations that do not use English?", "sql_esperado": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "sql_gerado": "SELECT COUNT(*) FROM people WHERE language != 'English' AND language IS NOT NULL"}
{"id": "world_1", "pergunta": "How many people live in countries that do not speak English?", "sql_esperado": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "sql_gerado": "SELECT COUNT(*) FROM people WHERE language != 'English'"}
{"id": "world_1", "pergunta": "What is the official language spoken in the country whose head of state is Beatrix?", "sql_esperado": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "sql_gerado": ""}
{"id": "world_1", "pergunta": "What is the official language used in the country the name of whose head of state is Beatrix.", "sql_esperado": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "sql_gerado": "SELECT official_language FROM country WHERE head_of_state = 'Beatrix'"}
{"id": "world_1", "pergunta": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "sql_esperado": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "sql_gerado": "SELECT COUNT(DISTINCT country_official_language) FROM countries WHERE foundation_year < 1930"}
{"id": "world_1", "pergunta": "For the countries founded before 1930, what is the total number of distinct official languages?", "sql_esperado": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "sql_gerado": "SELECT COUNT(DISTINCT official_language) FROM country WHERE founding_year < 1930"}
{"id": "world_1", "pergunta": "What are the countries that have greater surface area than any country in Europe?", "sql_esperado": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Which countries have greater area than that of any country in Europe?", "sql_esperado": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "sql_gerado": "SELECT country FROM country WHERE area > (SELECT MAX(area) FROM country WHERE continent = 'Europe')"}
{"id": "world_1", "pergunta": "What are the African countries that have a  population less than any country in Asia?", "sql_esperado": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Which African countries have a smaller population than that of any country in Asia?", "sql_esperado": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Which Asian countries have a population that is larger than any country in Africa?", "sql_esperado": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "sql_gerado": ""}
{"id": "world_1", "pergunta": "What are the Asian countries which have a population larger than that of any country in Africa?", "sql_esperado": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "sql_gerado": ""}
{"id": "world_1", "pergunta": "What are the country codes for countries that do not speak English?", "sql_esperado": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "sql_gerado": "SELECT country_code FROM country WHERE language != 'English'"}
{"id": "world_1", "pergunta": "Return the country codes for countries that do not speak English.", "sql_esperado": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "sql_gerado": "SELECT country_code FROM country WHERE language != 'English'"}
{"id": "world_1", "pergunta": "What are the country codes of countries where people use languages other than English?", "sql_esperado": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "sql_gerado": "SELECT country_code FROM language WHERE language != 'English'"}
{"id": "world_1", "pergunta": "Give the country codes for countries in which people speak langauges that are not English.", "sql_esperado": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "sql_gerado": "SELECT country_code FROM language WHERE language != 'English'"}
{"id": "world_1", "pergunta": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "sql_esperado": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "sql_gerado": "SELECT code FROM country WHERE language != 'English' AND government_form != 'Republic'"}
{"id": "world_1", "pergunta": "Return the codes of countries that do not speak English and do not have Republics for governments.", "sql_esperado": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "sql_gerado": "SELECT code FROM country WHERE language != 'English' AND government_type != 'Republic'"}
{"id": "world_1", "pergunta": "Which cities are in European countries where English is not the official language?", "sql_esperado": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "sql_gerado": "SELECT city FROM location WHERE continent = 'Europe' AND official_language != 'English'"}
{"id": "world_1", "pergunta": "What are the names of cities in Europe for which English is not the official language?", "sql_esperado": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Which unique cities are in Asian countries where Chinese is the official language ?", "sql_esperado": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "sql_gerado": "SELECT DISTINCT city FROM location WHERE continent = 'Asia' AND official_language = 'Chinese'"}
{"id": "world_1", "pergunta": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "sql_esperado": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "sql_gerado": "SELECT DISTINCT city FROM location WHERE continent = 'Asia' AND official_language = 'Chinese'"}
{"id": "world_1", "pergunta": "What are the name, independence year, and surface area of the country with the smallest population?", "sql_esperado": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "sql_gerado": "SELECT name, independence_year, surface_area FROM country ORDER BY population ASC LIMIT 1"}
{"id": "world_1", "pergunta": "Give the name, year of independence, and surface area of the country that has the lowest population.", "sql_esperado": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "sql_gerado": "SELECT name, year_of_independence, surface_area FROM country ORDER BY population ASC LIMIT 1"}
{"id": "world_1", "pergunta": "What are the population, name and leader of the country with the largest area?", "sql_esperado": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "sql_gerado": "SELECT population, name, leader FROM country ORDER BY area DESC LIMIT 1"}
{"id": "world_1", "pergunta": "Give the name, population, and head of state for the country that has the largest area.", "sql_esperado": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "sql_gerado": "SELECT name, population, head_of_state FROM country"}
{"id": "world_1", "pergunta": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "sql_esperado": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "sql_gerado": "SELECT country_name, COUNT(language) as num_languages"}
{"id": "world_1", "pergunta": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "sql_esperado": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "sql_gerado": "SELECT country_name, COUNT(language) FROM languages GROUP BY country_name HAVING COUNT(language) > 2"}
{"id": "world_1", "pergunta": "Find the number of cities in each district whose population is greater than the average population of cities?", "sql_esperado": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "sql_gerado": "SELECT district, COUNT(city) as num_cities"}
{"id": "world_1", "pergunta": "How many cities in each district have a population that is above the average population across all cities?", "sql_esperado": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "sql_gerado": "SELECT district, COUNT(city) as num_cities, AVG(population) as avg_population, SUM(population) as total_population FROM city GROUP BY district HAVING total_population / num_cities > AVG(population)"}
{"id": "world_1", "pergunta": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "sql_esperado": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "sql_gerado": "SELECT gov_form_name, total_population FROM government_form"}
{"id": "world_1", "pergunta": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "sql_esperado": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "sql_gerado": "SELECT form, SUM(population) as total_population"}
{"id": "world_1", "pergunta": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "sql_esperado": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "sql_gerado": "SELECT continent, AVG(life_expectancy) as average_life_expectancy, SUM(population) as total_population"}
{"id": "world_1", "pergunta": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "sql_esperado": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "sql_gerado": "SELECT continent, SUM(population) as total_population, AVG(life_expectancy) as average_life_expectancy"}
{"id": "world_1", "pergunta": "What are the names and areas of countries with the top 5 largest area?", "sql_esperado": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "sql_gerado": "SELECT name, area FROM country ORDER BY area DESC LIMIT 5"}
{"id": "world_1", "pergunta": "Return the names and surface areas of the 5 largest countries.", "sql_esperado": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "sql_gerado": "SELECT name, surface_area FROM countries ORDER BY surface_area DESC LIMIT 5"}
{"id": "world_1", "pergunta": "What are names of countries with the top 3 largest population?", "sql_esperado": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "sql_gerado": "SELECT country_name FROM population ORDER BY population DESC LIMIT 3"}
{"id": "world_1", "pergunta": "Return the names of the 3 most populated countries.", "sql_esperado": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "sql_gerado": "SELECT country_name FROM country ORDER BY population DESC LIMIT 3"}
{"id": "world_1", "pergunta": "What are the names of the nations with the 3 lowest populations?", "sql_esperado": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "sql_gerado": "SELECT name FROM nation ORDER BY population LIMIT 3"}
{"id": "world_1", "pergunta": "Return the names of the 3 countries with the fewest people.", "sql_esperado": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "sql_gerado": "SELECT country, COUNT(*) as people"}
{"id": "world_1", "pergunta": "how many countries are in Asia?", "sql_esperado": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "sql_gerado": "SELECT COUNT(*) FROM country WHERE continent = 'Asia'"}
{"id": "world_1", "pergunta": "Count the number of countries in Asia.", "sql_esperado": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "sql_gerado": "SELECT COUNT(*) FROM country WHERE continent = 'Asia'"}
{"id": "world_1", "pergunta": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "sql_esperado": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "sql_gerado": "SELECT country_name FROM country WHERE continent = 'Europe' AND population = 80000"}
{"id": "world_1", "pergunta": "Give the names of countries that are in Europe and have a population equal to 80000.", "sql_esperado": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "sql_gerado": "SELECT country_name FROM country WHERE continent = 'Europe' AND population = 80000"}
{"id": "world_1", "pergunta": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "sql_esperado": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "sql_gerado": "SELECT SUM(population) AS total_population, AVG(area) AS average_area FROM country WHERE continent = 'North America' AND area > 3000"}
{"id": "world_1", "pergunta": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "sql_esperado": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "sql_gerado": "SELECT SUM(population) AS total_population, AVG(surface_area) AS average_surface_area"}
{"id": "world_1", "pergunta": "What are the cities whose population is between 160000 and 900000?", "sql_esperado": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "sql_gerado": "SELECT city FROM city WHERE population BETWEEN 160000 AND 900000"}
{"id": "world_1", "pergunta": "Return the names of cities that have a population between 160000 and 900000 .", "sql_esperado": "select name from city where population between 160000 and 900000", "sql_gerado": "SELECT city_name FROM city WHERE population BETWEEN 160000 AND 900000"}
{"id": "world_1", "pergunta": "Which language is spoken by the largest number of countries?", "sql_esperado": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Give the language that is spoken in the most countries.", "sql_esperado": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "sql_gerado": ""}
{"id": "world_1", "pergunta": "What is the language spoken by the largest percentage of people in each country?", "sql_esperado": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "sql_gerado": "SELECT country, language, COUNT(*) as total_people, COUNT(*) / (SELECT COUNT(*) FROM people WHERE country = t.country) as percentage"}
{"id": "world_1", "pergunta": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "sql_esperado": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "sql_gerado": "SELECT country_code, language_with_max_percentage FROM ("}
{"id": "world_1", "pergunta": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "sql_esperado": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "sql_gerado": ""}
{"id": "world_1", "pergunta": "Count the number of countries for which Spanish is the predominantly spoken language.", "sql_esperado": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "sql_gerado": "SELECT COUNT(DISTINCT born_country) FROM head WHERE language = 'Spanish'"}
{"id": "world_1", "pergunta": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "sql_esperado": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "sql_gerado": "SELECT country_code FROM language WHERE language = 'Spanish' GROUP BY country_code ORDER BY SUM(population) DESC LIMIT 1"}
{"id": "world_1", "pergunta": "Return the codes of countries for which Spanish is the predominantly spoken language.", "sql_esperado": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "sql_gerado": "SELECT code FROM country WHERE predominant_language = 'Spanish'"}
{"id": "orchestra", "pergunta": "How many conductors are there?", "sql_esperado": "SELECT count(*) FROM conductor", "sql_gerado": "SELECT count(*) FROM conductor"}
{"id": "orchestra", "pergunta": "Count the number of conductors.", "sql_esperado": "SELECT count(*) FROM conductor", "sql_gerado": "SELECT COUNT(*) FROM conductor"}
{"id": "orchestra", "pergunta": "List the names of conductors in ascending order of age.", "sql_esperado": "SELECT Name FROM conductor ORDER BY Age ASC", "sql_gerado": "SELECT name FROM conductor ORDER BY age ASC"}
{"id": "orchestra", "pergunta": "What are the names of conductors, ordered by age?", "sql_esperado": "SELECT Name FROM conductor ORDER BY Age ASC", "sql_gerado": "SELECT conductor_name, age FROM conductor ORDER BY age"}
{"id": "orchestra", "pergunta": "What are the names of conductors whose nationalities are not \"USA\"?", "sql_esperado": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "sql_gerado": "SELECT conductor_name FROM conductor WHERE nationality != 'USA'"}
{"id": "orchestra", "pergunta": "Return the names of conductors that do not have the nationality \"USA\".", "sql_esperado": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "sql_gerado": "SELECT conductor_name FROM conductor WHERE nationality != 'USA'"}
{"id": "orchestra", "pergunta": "What are the record companies of orchestras in descending order of years in which they were founded?", "sql_esperado": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "sql_gerado": "SELECT record_company, YEAR(foundation_year) AS foundation_year, COUNT(*) AS number_of_orchestras"}
{"id": "orchestra", "pergunta": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "sql_esperado": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "sql_gerado": "SELECT company_name FROM orchestra ORDER BY creation_year DESC"}
{"id": "orchestra", "pergunta": "What is the average attendance of shows?", "sql_esperado": "SELECT avg(Attendance) FROM SHOW", "sql_gerado": "SELECT AVG(attendance) FROM show"}
{"id": "orchestra", "pergunta": "Return the average attendance across all shows.", "sql_esperado": "SELECT avg(Attendance) FROM SHOW", "sql_gerado": "SELECT AVG(attendance) FROM show"}
{"id": "orchestra", "pergunta": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "sql_esperado": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "sql_gerado": "SELECT MAX(share_of_performance) as max_share, MIN(share_of_performance) as min_share FROM performance WHERE performance_type != 'Live final'"}
{"id": "orchestra", "pergunta": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "sql_esperado": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "sql_gerado": "SELECT MAX(share) as max_share, MIN(share) as min_share FROM performance WHERE type != 'Live final'"}
{"id": "orchestra", "pergunta": "How many different nationalities do conductors have?", "sql_esperado": "SELECT count(DISTINCT Nationality) FROM conductor", "sql_gerado": "SELECT COUNT(DISTINCT nationality) FROM conductors"}
{"id": "orchestra", "pergunta": "Count the number of different nationalities of conductors.", "sql_esperado": "SELECT count(DISTINCT Nationality) FROM conductor", "sql_gerado": "SELECT COUNT(DISTINCT nationality) FROM conductors"}
{"id": "orchestra", "pergunta": "List names of conductors in descending order of years of work.", "sql_esperado": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "sql_gerado": "SELECT name FROM conductor ORDER BY years_of_work DESC"}
{"id": "orchestra", "pergunta": "What are the names of conductors, sorted descending by the number of years they have worked?", "sql_esperado": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "sql_gerado": "SELECT conductor_name, years_of_service FROM conductors ORDER BY years_of_service DESC"}
{"id": "orchestra", "pergunta": "List the name of the conductor with the most years of work.", "sql_esperado": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "sql_gerado": "SELECT conductor_name FROM conductor ORDER BY years_of_work DESC LIMIT 1"}
{"id": "orchestra", "pergunta": "What is the name of the conductor who has worked the greatest number of years?", "sql_esperado": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "sql_gerado": "SELECT conductor_name FROM conductor ORDER BY years_worked DESC LIMIT 1"}
{"id": "orchestra", "pergunta": "Show the names of conductors and the orchestras they have conducted.", "sql_esperado": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "sql_gerado": "SELECT conductor_name, orchestra FROM conductor_orchestra"}
{"id": "orchestra", "pergunta": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "sql_esperado": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "sql_gerado": "SELECT conductor_name, orchestra_name FROM conductor_orchestra_association"}
{"id": "orchestra", "pergunta": "Show the names of conductors that have conducted more than one orchestras.", "sql_esperado": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "sql_gerado": "SELECT conductor_name FROM conductor WHERE conductor_id IN ("}
{"id": "orchestra", "pergunta": "What are the names of conductors who have conducted at more than one orchestra?", "sql_esperado": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "sql_gerado": "SELECT conductor_name FROM conductor WHERE conductor_id IN ("}
{"id": "orchestra", "pergunta": "Show the name of the conductor that has conducted the most number of orchestras.", "sql_esperado": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": "SELECT conductor_name FROM conductor WHERE number_of_orchestras_conducted = (SELECT MAX(number_of_orchestras_conducted) FROM conductor)"}
{"id": "orchestra", "pergunta": "What is the name of the conductor who has conducted the most orchestras?", "sql_esperado": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": "SELECT conductor_name FROM conductor ORDER BY num_orchestras_conducted DESC LIMIT 1"}
{"id": "orchestra", "pergunta": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "sql_esperado": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "sql_gerado": "SELECT conductor_name FROM conductor WHERE orchestra_founded > '2008-01-01'"}
{"id": "orchestra", "pergunta": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "sql_esperado": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "sql_gerado": "SELECT conductor_name FROM conductor WHERE orchestra_foundation_year > 2008"}
{"id": "orchestra", "pergunta": "Please show the different record companies and the corresponding number of orchestras.", "sql_esperado": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "sql_gerado": "SELECT record_company, COUNT(orchestra) FROM orchestra GROUP BY record_company"}
{"id": "orchestra", "pergunta": "How many orchestras does each record company manage?", "sql_esperado": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "sql_gerado": "SELECT record_company_id, COUNT(orchestra_id) as number_of_orchestras"}
{"id": "orchestra", "pergunta": "Please show the record formats of orchestras in ascending order of count.", "sql_esperado": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "sql_gerado": "SELECT format, COUNT(*) as count FROM orchestra GROUP BY format ORDER BY count ASC"}
{"id": "orchestra", "pergunta": "What are the major record formats of orchestras, sorted by their frequency?", "sql_esperado": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "sql_gerado": "SELECT format, COUNT(*) as frequency FROM orchestra GROUP BY format ORDER BY frequency DESC"}
{"id": "orchestra", "pergunta": "List the record company shared by the most number of orchestras.", "sql_esperado": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": "SELECT label FROM orchestra GROUP BY label HAVING COUNT(*) MAX"}
{"id": "orchestra", "pergunta": "What is the record company used by the greatest number of orchestras?", "sql_esperado": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": "SELECT record_company, COUNT(orchestra_id) as num_orchestras"}
{"id": "orchestra", "pergunta": "List the names of orchestras that have no performance.", "sql_esperado": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "sql_gerado": "SELECT name FROM orchestra WHERE performance_id IS NULL"}
{"id": "orchestra", "pergunta": "What are the orchestras that do not have any performances?", "sql_esperado": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "sql_gerado": "SELECT orchestra FROM performances INNER JOIN orchestra ON performances.orchestra_id = orchestra.id WHERE performances.performance_id IS NULL"}
{"id": "orchestra", "pergunta": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "sql_esperado": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "sql_gerado": "SELECT record_company FROM orchestra WHERE year_founded < 2003 OR year_founded > 2003"}
{"id": "orchestra", "pergunta": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "sql_esperado": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "sql_gerado": "SELECT record_company"}
{"id": "orchestra", "pergunta": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "sql_esperado": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "sql_gerado": "SELECT COUNT(*) FROM orchestra WHERE record_format IN ('CD', 'DVD')"}
{"id": "orchestra", "pergunta": "Count the number of orchestras that have CD or DVD as their record format.", "sql_esperado": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "sql_gerado": "SELECT COUNT(*) FROM orchestra WHERE record_format IN ('CD', 'DVD')"}
{"id": "orchestra", "pergunta": "Show the years in which orchestras that have given more than one performance are founded.", "sql_esperado": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "sql_gerado": "SELECT creation_year FROM orchestra GROUP BY creation_year HAVING COUNT(*) > 1"}
{"id": "orchestra", "pergunta": "What are years of founding for orchestras that have had more than a single performance?", "sql_esperado": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "sql_gerado": "SELECT creation_year FROM orchestra WHERE num_performances > 1"}
{"id": "network_1", "pergunta": "How many high schoolers are there?", "sql_esperado": "SELECT count(*) FROM Highschooler", "sql_gerado": "SELECT count(*) FROM student WHERE education_level = 'High School'"}
{"id": "network_1", "pergunta": "Count the number of high schoolers.", "sql_esperado": "SELECT count(*) FROM Highschooler", "sql_gerado": "SELECT COUNT(*) FROM students WHERE education_level = 'High School'"}
{"id": "network_1", "pergunta": "Show the names and grades of each high schooler.", "sql_esperado": "SELECT name ,  grade FROM Highschooler", "sql_gerado": "SELECT name, grade FROM high_schooler"}
{"id": "network_1", "pergunta": "What are the names and grades for each high schooler?", "sql_esperado": "SELECT name ,  grade FROM Highschooler", "sql_gerado": "SELECT name, grade FROM high_schooler"}
{"id": "network_1", "pergunta": "Show all the grades of the high schoolers.", "sql_esperado": "SELECT grade FROM Highschooler", "sql_gerado": "SELECT grade FROM high_schoolers"}
{"id": "network_1", "pergunta": "What is the grade of each high schooler?", "sql_esperado": "SELECT grade FROM Highschooler", "sql_gerado": "SELECT grade FROM students WHERE level = 'High School'"}
{"id": "network_1", "pergunta": "What grade is Kyle in?", "sql_esperado": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "sql_gerado": "SELECT grade FROM student WHERE name = 'Kyle'"}
{"id": "network_1", "pergunta": "Return the grade for the high schooler named Kyle.", "sql_esperado": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "sql_gerado": "SELECT grade FROM high_school WHERE name = 'Kyle'"}
{"id": "network_1", "pergunta": "Show the names of all high schoolers in grade 10.", "sql_esperado": "SELECT name FROM Highschooler WHERE grade  =  10", "sql_gerado": "SELECT name FROM student WHERE grade = 10 AND education_level = 'High School'"}
{"id": "network_1", "pergunta": "What are the names of all high schoolers in grade 10?", "sql_esperado": "SELECT name FROM Highschooler WHERE grade  =  10", "sql_gerado": "SELECT name FROM student WHERE grade = 10 AND level = 'High School'"}
{"id": "network_1", "pergunta": "Show the ID of the high schooler named Kyle.", "sql_esperado": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "sql_gerado": "SELECT id FROM head WHERE name = 'Kyle' AND age = 18"}
{"id": "network_1", "pergunta": "What is Kyle's id?", "sql_esperado": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "sql_gerado": "SELECT id FROM head WHERE name = 'Kyle'"}
{"id": "network_1", "pergunta": "How many high schoolers are there in grade 9 or 10?", "sql_esperado": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "sql_gerado": "SELECT count(*) FROM students WHERE grade IN (9, 10) AND education_level = 'High School'"}
{"id": "network_1", "pergunta": "Count the number of high schoolers in grades 9 or 10.", "sql_esperado": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "sql_gerado": "SELECT COUNT(*) FROM students WHERE grade IN (9, 10) AND education_level = 'High School'"}
{"id": "network_1", "pergunta": "Show the number of high schoolers for each grade.", "sql_esperado": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "sql_gerado": "SELECT grade, COUNT(*) as number_of_high_schoolers FROM student WHERE education_level = 'High School' GROUP BY grade"}
{"id": "network_1", "pergunta": "How many high schoolers are in each grade?", "sql_esperado": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "sql_gerado": "SELECT grade, COUNT(*) as number_of_high_schoolers FROM student WHERE education_level = 'High School' GROUP BY grade"}
{"id": "network_1", "pergunta": "Which grade has the most high schoolers?", "sql_esperado": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT grade, COUNT(student) AS count FROM student GROUP BY grade ORDER BY count DESC LIMIT 1"}
{"id": "network_1", "pergunta": "Return the grade that has the greatest number of high schoolers.", "sql_esperado": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT grade, COUNT(student) AS num_high_schoolers FROM student GROUP BY grade ORDER BY num_high_schoolers DESC LIMIT 1"}
{"id": "network_1", "pergunta": "Show me all grades that have at least 4 students.", "sql_esperado": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "sql_gerado": "SELECT grade FROM grade WHERE num_students >= 4"}
{"id": "network_1", "pergunta": "Which grades have 4 or more high schoolers?", "sql_esperado": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "sql_gerado": "SELECT grade FROM student WHERE high_school_count >= 4"}
{"id": "network_1", "pergunta": "Show the student IDs and numbers of friends corresponding to each.", "sql_esperado": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "sql_gerado": "SELECT student_id, friend_number FROM student_friends"}
{"id": "network_1", "pergunta": "How many friends does each student have?", "sql_esperado": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "sql_gerado": "SELECT student_id, COUNT(friend_id) AS number_of_friends FROM student_friends GROUP BY student_id"}
{"id": "network_1", "pergunta": "Show the names of high school students and their corresponding number of friends.", "sql_esperado": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "sql_gerado": "SELECT students.name, COUNT(friends.student_id) AS number_of_friends"}
{"id": "network_1", "pergunta": "What are the names of the high schoolers and how many friends does each have?", "sql_esperado": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "sql_gerado": "SELECT name, friends FROM students WHERE level = 'High School'"}
{"id": "network_1", "pergunta": "What is the name of the high schooler who has the greatest number of friends?", "sql_esperado": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT high_schooler, COUNT(friend) AS num_friends FROM friend GROUP BY high_schooler ORDER BY num_friends DESC LIMIT 1"}
{"id": "network_1", "pergunta": "Return the name of the high school student with the most friends.", "sql_esperado": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT hs_student.name"}
{"id": "network_1", "pergunta": "Show the names of high schoolers who have at least 3 friends.", "sql_esperado": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "sql_gerado": "SELECT name FROM students WHERE grade = '12' AND friends > 3"}
{"id": "network_1", "pergunta": "What are the names of high schoolers who have 3 or more friends?", "sql_esperado": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "sql_gerado": "SELECT name FROM students WHERE school_level = 'High School' AND friends_count >= 3"}
{"id": "network_1", "pergunta": "Show the names of all of the high schooler Kyle's friends.", "sql_esperado": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "sql_gerado": "SELECT name FROM friends WHERE age = 'Kyle' AND age = 'high schooler' AND relationship = 'friend'"}
{"id": "network_1", "pergunta": "Return the names of friends of the high school student Kyle.", "sql_esperado": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "sql_gerado": "SELECT friend_name FROM friendships WHERE student_name = 'Kyle' AND relationship = 'friend'"}
{"id": "network_1", "pergunta": "How many friends does the high school student Kyle have?", "sql_esperado": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "sql_gerado": "SELECT count(*) FROM friends WHERE student = 'Kyle' AND school_level = 'High School'"}
{"id": "network_1", "pergunta": "Count the number of friends Kyle has.", "sql_esperado": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "sql_gerado": "SELECT COUNT(*) FROM friends WHERE friend = 'Kyle'"}
{"id": "network_1", "pergunta": "Show ids of all students who do not have any friends.", "sql_esperado": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "sql_gerado": "SELECT id FROM student WHERE id NOT IN (SELECT friend_id FROM friendship)"}
{"id": "network_1", "pergunta": "What are the ids of high school students who do not have friends?", "sql_esperado": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "sql_gerado": "SELECT id FROM students WHERE education_level = 'High School' AND friend_id IS NULL"}
{"id": "network_1", "pergunta": "Show names of all high school students who do not have any friends.", "sql_esperado": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "sql_gerado": "SELECT name FROM students WHERE education_level = 'High School' AND friend_count = 0"}
{"id": "network_1", "pergunta": "What are the names of students who have no friends?", "sql_esperado": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "sql_gerado": "SELECT name FROM students WHERE friend_id IS NULL"}
{"id": "network_1", "pergunta": "Show the ids of high schoolers who have friends and are also liked by someone else.", "sql_esperado": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "sql_gerado": "SELECT id FROM students WHERE education_level = 'High School' AND (EXISTS (SELECT 1 FROM friendships WHERE students.id = friendships.student_id) AND EXISTS (SELECT 1 FROM likes WHERE students.id = liked_student_id))"}
{"id": "network_1", "pergunta": "What are the ids of students who both have friends and are liked?", "sql_esperado": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "sql_gerado": "SELECT student_id FROM student WHERE is_liked = true AND has_friends = true"}
{"id": "network_1", "pergunta": "Show name of all students who have some friends and also are liked by someone else.", "sql_esperado": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "sql_gerado": "SELECT name FROM students WHERE has_friends = true AND is_liked = true"}
{"id": "network_1", "pergunta": "What are the names of high schoolers who both have friends and are liked?", "sql_esperado": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "sql_gerado": "SELECT names FROM students WHERE school_level = 'High School' AND (has_friends = true AND is_liked = true)"}
{"id": "network_1", "pergunta": "Count the number of likes for each student id.", "sql_esperado": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "sql_gerado": "SELECT student_id, COUNT(like) as number_of_likes FROM student_likes GROUP BY student_id"}
{"id": "network_1", "pergunta": "How many likes correspond to each student id?", "sql_esperado": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "sql_gerado": "SELECT student_id, COUNT(*) as number_of_likes FROM likes GROUP BY student_id"}
{"id": "network_1", "pergunta": "Show the names of high schoolers who have likes, and numbers of likes for each.", "sql_esperado": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "sql_gerado": "SELECT name, COUNT(*) as num_likes FROM student WHERE school_level = 'high school' AND likes IS NOT NULL GROUP BY name"}
{"id": "network_1", "pergunta": "What are the names of high schoolers who have likes, and how many likes does each have?", "sql_esperado": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "sql_gerado": "SELECT name, COUNT(*) as likes FROM student WHERE school_level = 'High School' AND has_likes = TRUE GROUP BY name"}
{"id": "network_1", "pergunta": "What is the name of the high schooler who has the greatest number of likes?", "sql_esperado": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT student_name FROM students WHERE school_level = 'High School' AND num_likes = (SELECT MAX(num_likes) FROM students WHERE school_level = 'High School')"}
{"id": "network_1", "pergunta": "Give the name of the student with the most likes.", "sql_esperado": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT student_name FROM student_likes GROUP BY student_name ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "network_1", "pergunta": "Show the names of students who have at least 2 likes.", "sql_esperado": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "sql_gerado": "SELECT name FROM students WHERE likes > 2"}
{"id": "network_1", "pergunta": "What are the names of students who have 2 or more likes?", "sql_esperado": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "sql_gerado": "SELECT student_name FROM student WHERE num_likes > 2"}
{"id": "network_1", "pergunta": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "sql_esperado": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "sql_gerado": "SELECT students.name"}
{"id": "network_1", "pergunta": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "sql_esperado": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "sql_gerado": "SELECT friends.name"}
{"id": "network_1", "pergunta": "How many likes does Kyle have?", "sql_esperado": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "sql_gerado": "SELECT likes FROM user WHERE name = 'Kyle'"}
{"id": "network_1", "pergunta": "Return the number of likes that the high schooler named Kyle has.", "sql_esperado": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "sql_gerado": "SELECT likes FROM users WHERE name = 'Kyle' AND age BETWEEN 13 AND 19"}
{"id": "network_1", "pergunta": "Find the average grade of all students who have some friends.", "sql_esperado": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "sql_gerado": "SELECT AVG(grade) FROM student WHERE id_friend IS NOT NULL"}
{"id": "network_1", "pergunta": "What is the average grade of students who have friends?", "sql_esperado": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "sql_gerado": "SELECT AVG(grade) FROM student WHERE has_friend = true"}
{"id": "network_1", "pergunta": "Find the minimum grade of students who have no friends.", "sql_esperado": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "sql_gerado": "SELECT MIN(grade) FROM student WHERE friend_count = 0"}
{"id": "network_1", "pergunta": "What is the lowest grade of students who do not have any friends?", "sql_esperado": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "sql_gerado": "SELECT MIN(grade) FROM student WHERE friend_count = 0"}
{"id": "dog_kennels", "pergunta": "Which states have both owners and professionals living there?", "sql_esperado": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "sql_gerado": "SELECT born_state FROM owner, professional WHERE owner.born_state = professional.living_state"}
{"id": "dog_kennels", "pergunta": "Find the states where both owners and professionals live.", "sql_esperado": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "sql_gerado": "SELECT born_state FROM owners, professionals WHERE owners.born_state = professionals.lives_in"}
{"id": "dog_kennels", "pergunta": "What is the average age of the dogs who have gone through any treatments?", "sql_esperado": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "sql_gerado": "SELECT AVG(age) FROM dog WHERE has_treated = 1"}
{"id": "dog_kennels", "pergunta": "Find the average age of the dogs who went through treatments.", "sql_esperado": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "sql_gerado": "SELECT AVG(age) FROM dog WHERE treatment = true"}
{"id": "dog_kennels", "pergunta": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "sql_esperado": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "sql_gerado": "SELECT id, last_name, cell_phone FROM professional WHERE state = 'Indiana' OR treatments > 2"}
{"id": "dog_kennels", "pergunta": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "sql_esperado": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "sql_gerado": "SELECT id, last_name, cell_phone FROM professionals WHERE state = 'Indiana' OR treatments > 2"}
{"id": "dog_kennels", "pergunta": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "sql_esperado": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "sql_gerado": "SELECT name FROM dogs WHERE treatment_cost < 1000"}
{"id": "dog_kennels", "pergunta": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "sql_esperado": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "sql_gerado": "SELECT dog_name FROM owner_dog WHERE treatment_cost <= 1000"}
{"id": "dog_kennels", "pergunta": "Which first names are used for professionals or owners but are not used as dog names?", "sql_esperado": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "sql_gerado": ""}
{"id": "dog_kennels", "pergunta": "Find the first names that are used for professionals or owners but are not used as dog names.", "sql_esperado": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "sql_gerado": "SELECT name FROM professionals, owners WHERE name NOT IN (SELECT name FROM dogs)"}
{"id": "dog_kennels", "pergunta": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "sql_esperado": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "sql_gerado": "SELECT id, role, email FROM professional WHERE id NOT IN (SELECT professional_id FROM treatment WHERE animal = 'dog')"}
{"id": "dog_kennels", "pergunta": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "sql_esperado": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "sql_gerado": "SELECT id, role, email FROM professional WHERE treatment_on_dogs IS NULL"}
{"id": "dog_kennels", "pergunta": "Which owner owns the most dogs? List the owner id, first name and last name.", "sql_esperado": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT owner_id, first_name, last_name FROM owner ORDER BY number_of_dogs DESC LIMIT 1"}
{"id": "dog_kennels", "pergunta": "Return the owner id, first name and last name of the owner who has the most dogs.", "sql_esperado": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT owner_id, first_name, last_name FROM owner WHERE owner_id = (SELECT owner_id FROM owner JOIN dog ON owner.owner_id = dog.owner_id GROUP BY owner_id ORDER BY COUNT(dog.owner_id) DESC LIMIT 1)"}
{"id": "dog_kennels", "pergunta": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "sql_esperado": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "sql_gerado": "SELECT id, role, first_name FROM professional WHERE treatments > 2"}
{"id": "dog_kennels", "pergunta": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "sql_esperado": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "sql_gerado": "SELECT id, role, first_name FROM professionals WHERE num_treatments > 2"}
{"id": "dog_kennels", "pergunta": "What is the name of the breed with the most dogs?", "sql_esperado": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT breed, COUNT(dog_id) as count"}
{"id": "dog_kennels", "pergunta": "Which breed do the most dogs have? Give me the breed name.", "sql_esperado": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT breed FROM dog_owner GROUP BY breed ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "dog_kennels", "pergunta": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "sql_esperado": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT owner_id, last_name FROM owner JOIN treatment ON owner.id = treatment.owner_id GROUP BY owner_id ORDER BY SUM(cost) DESC"}
{"id": "dog_kennels", "pergunta": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "sql_esperado": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "sql_gerado": "SELECT owner_id, last_name FROM owner JOIN ("}
{"id": "dog_kennels", "pergunta": "What is the description of the treatment type that costs the least money in total?", "sql_esperado": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "sql_gerado": "SELECT min(total_cost) AS Min_Total_Cost, treatment_type"}
{"id": "dog_kennels", "pergunta": "Give me the description of the treatment type whose total cost is the lowest.", "sql_esperado": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "sql_gerado": "SELECT description FROM treatment_type ORDER BY total_cost ASC LIMIT 1"}
{"id": "dog_kennels", "pergunta": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "sql_esperado": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "sql_gerado": "SELECT owner_id, zip_code FROM owner ORDER BY total_spent_on_dogs DESC LIMIT 1"}
{"id": "dog_kennels", "pergunta": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "sql_esperado": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "sql_gerado": "SELECT owner_id, zip_code FROM owner JOIN ("}
{"id": "dog_kennels", "pergunta": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "sql_esperado": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "sql_gerado": "SELECT professional_id, phone FROM professional WHERE treatment_type_count > 2"}
{"id": "dog_kennels", "pergunta": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "sql_esperado": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "sql_gerado": "SELECT id, cell_phone FROM professional WHERE treatment_type_id IN ("}
{"id": "dog_kennels", "pergunta": "What are the first name and last name of the professionals who have done treatment with cost below average?", "sql_esperado": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "sql_gerado": "SELECT first_name, last_name FROM professional WHERE treatment_cost < (SELECT AVG(treatment_cost) FROM professional)"}
{"id": "dog_kennels", "pergunta": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "sql_esperado": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "sql_gerado": "SELECT first_name, last_name FROM professional WHERE treatment_cost < (SELECT AVG(treatment_cost) FROM treatment)"}
{"id": "dog_kennels", "pergunta": "List the date of each treatment, together with the first name of the professional who operated it.", "sql_esperado": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "sql_gerado": "SELECT treatment_date, first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.id"}
{"id": "dog_kennels", "pergunta": "What are the date and the operating professional's first name of each treatment?", "sql_esperado": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "sql_gerado": "SELECT treatment_date, professional_first_name FROM treatment"}
{"id": "dog_kennels", "pergunta": "List the cost of each treatment and the corresponding treatment type description.", "sql_esperado": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "sql_gerado": "SELECT treatment_cost, treatment_description FROM treatments"}
{"id": "dog_kennels", "pergunta": "What are the cost and treatment type description of each treatment?", "sql_esperado": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "sql_gerado": "SELECT cost, treatment_type_description FROM treatment"}
{"id": "dog_kennels", "pergunta": "List each owner's first name, last name, and the size of his for her dog.", "sql_esperado": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "sql_gerado": "SELECT first_name, last_name, dog_size FROM owner"}
{"id": "dog_kennels", "pergunta": "What are each owner's first name, last name, and the size of their dog?", "sql_esperado": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "sql_gerado": "SELECT owners.first_name, owners.last_name, pets.dog_size FROM owners JOIN pets ON owners.id = pets.owner_id"}
{"id": "dog_kennels", "pergunta": "List pairs of the owner's first name and the dogs's name.", "sql_esperado": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "sql_gerado": "SELECT first_name_owner, dog_name FROM owner_dog"}
{"id": "dog_kennels", "pergunta": "What are each owner's first name and their dogs's name?", "sql_esperado": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "sql_gerado": "SELECT owners.first_name, dogs.name FROM owners, dogs WHERE owners.id = dogs.owner_id"}
{"id": "dog_kennels", "pergunta": "List the names of the dogs of the rarest breed and the treatment dates of them.", "sql_esperado": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "sql_gerado": "SELECT dog_name, breed, treatment_date FROM dogs WHERE breed = (SELECT breed FROM dogs GROUP BY breed ORDER BY COUNT(*) DESC LIMIT 1)"}
{"id": "dog_kennels", "pergunta": "Which dogs are of the rarest breed? Show their names and treatment dates.", "sql_esperado": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "sql_gerado": "SELECT name, treatment_date FROM dogs ORDER BY breed DESC LIMIT 1"}
{"id": "dog_kennels", "pergunta": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "sql_esperado": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "sql_gerado": "SELECT owner_first_name, dog_name FROM dog_ownership WHERE owner_state = 'Virginia'"}
{"id": "dog_kennels", "pergunta": "Find the first names of owners living in Virginia and the names of dogs they own.", "sql_esperado": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "sql_gerado": "SELECT owners.first_name, owners.living_state, pets.dog_name"}
{"id": "dog_kennels", "pergunta": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "sql_esperado": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "sql_gerado": "SELECT arrival_date, departing_date FROM dogs WHERE treatment_status = 'treated'"}
{"id": "dog_kennels", "pergunta": "Find the arriving date and the departing date of the dogs that received a treatment.", "sql_esperado": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "sql_gerado": "SELECT arrival_date, departure_date FROM dogs_treatments WHERE species = 'dog'"}
{"id": "dog_kennels", "pergunta": "List the last name of the owner owning the youngest dog.", "sql_esperado": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "sql_gerado": "SELECT last_name FROM owner WHERE id_owner = (SELECT id_owner FROM owner JOIN dog ON owner.id_owner = dog.id_owner_fk ORDER BY dog.birthdate ASC LIMIT 1)"}
{"id": "dog_kennels", "pergunta": "Who owns the youngest dog? Give me his or her last name.", "sql_esperado": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "sql_gerado": "SELECT last_name FROM owner WHERE age_of_youngest_dog = (SELECT MIN(age_of_dog) FROM dog WHERE owner_id = owner.id)"}
{"id": "dog_kennels", "pergunta": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "sql_esperado": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "sql_gerado": "SELECT email FROM professional WHERE born_state IN ('Hawaii', 'Wisconsin')"}
{"id": "dog_kennels", "pergunta": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "sql_esperado": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "sql_gerado": "SELECT email FROM professional WHERE born_state IN ('Hawaii', 'Wisconsin')"}
{"id": "dog_kennels", "pergunta": "What are the arriving date and the departing date of all the dogs?", "sql_esperado": "SELECT date_arrived ,  date_departed FROM Dogs", "sql_gerado": "SELECT arrival_date, departure_date FROM animals WHERE species = 'dog'"}
{"id": "dog_kennels", "pergunta": "List the arrival date and the departure date for all the dogs.", "sql_esperado": "SELECT date_arrived ,  date_departed FROM Dogs", "sql_gerado": "SELECT arrival_date, departure_date FROM dogs"}
{"id": "dog_kennels", "pergunta": "How many dogs went through any treatments?", "sql_esperado": "SELECT count(DISTINCT dog_id) FROM Treatments", "sql_gerado": "SELECT COUNT(*) FROM treatments WHERE animal = 'dog'"}
{"id": "dog_kennels", "pergunta": "Count the number of dogs that went through a treatment.", "sql_esperado": "SELECT count(DISTINCT dog_id) FROM Treatments", "sql_gerado": "SELECT COUNT(*) FROM pets WHERE species = 'dog' AND treatment_received = true"}
{"id": "dog_kennels", "pergunta": "How many professionals have performed any treatment to dogs?", "sql_esperado": "SELECT count(DISTINCT professional_id) FROM Treatments", "sql_gerado": "SELECT COUNT(*) FROM professional WHERE treatment_type LIKE '%dog%'"}
{"id": "dog_kennels", "pergunta": "Find the number of professionals who have ever treated dogs.", "sql_esperado": "SELECT count(DISTINCT professional_id) FROM Treatments", "sql_gerado": "SELECT COUNT(*) FROM professional WHERE has_treated LIKE '%dogs%'"}
{"id": "dog_kennels", "pergunta": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "sql_esperado": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "sql_gerado": "SELECT role, street, city, state FROM professional WHERE city LIKE '%West%'"}
{"id": "dog_kennels", "pergunta": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "sql_esperado": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "sql_gerado": "SELECT role, street, city, state FROM professional WHERE city LIKE '%West%'"}
{"id": "dog_kennels", "pergunta": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "sql_esperado": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "sql_gerado": "SELECT first_name, last_name, email FROM owner WHERE born_state LIKE '%North%'"}
{"id": "dog_kennels", "pergunta": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "sql_esperado": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "sql_gerado": "SELECT first_name, last_name, email FROM owner WHERE state LIKE '%North%'"}
{"id": "dog_kennels", "pergunta": "How many dogs have an age below the average?", "sql_esperado": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "sql_gerado": "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)"}
{"id": "dog_kennels", "pergunta": "Count the number of dogs of an age below the average.", "sql_esperado": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "sql_gerado": "SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)"}
{"id": "dog_kennels", "pergunta": "How much does the most recent treatment cost?", "sql_esperado": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "sql_gerado": "SELECT MAX(cost) FROM treatment"}
{"id": "dog_kennels", "pergunta": "Show me the cost of the most recently performed treatment.", "sql_esperado": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "sql_gerado": "SELECT MAX(cost) FROM treatment"}
{"id": "dog_kennels", "pergunta": "How many dogs have not gone through any treatment?", "sql_esperado": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "sql_gerado": "SELECT count(*) FROM dogs WHERE treatment_id IS NULL"}
{"id": "dog_kennels", "pergunta": "Tell me the number of dogs that have not received any treatment .", "sql_esperado": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "sql_gerado": "SELECT count(*) FROM dogs WHERE treatment_received IS NULL"}
{"id": "dog_kennels", "pergunta": "How many owners temporarily do not have any dogs?", "sql_esperado": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "sql_gerado": "SELECT COUNT(*) FROM owners WHERE has_dog IS NULL"}
{"id": "dog_kennels", "pergunta": "Find the number of owners who do not own any dogs at this moment.", "sql_esperado": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "sql_gerado": "SELECT count(*) FROM owner WHERE has_dog = false"}
{"id": "dog_kennels", "pergunta": "How many professionals did not operate any treatment on dogs?", "sql_esperado": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "sql_gerado": "SELECT count(*) FROM professional WHERE treatment_on_dogs IS NULL"}
{"id": "dog_kennels", "pergunta": "Find the number of professionals who have not treated any dogs.", "sql_esperado": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "sql_gerado": "SELECT count(*) FROM professional WHERE has_treated_dog = false"}
{"id": "dog_kennels", "pergunta": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "sql_esperado": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "sql_gerado": "SELECT dog_name, age, weight FROM dogs WHERE abandoned = 1"}
{"id": "dog_kennels", "pergunta": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "sql_esperado": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "sql_gerado": "SELECT dog_name, age, weight FROM dogs WHERE abandoned = 1"}
{"id": "dog_kennels", "pergunta": "What is the average age of all the dogs?", "sql_esperado": "SELECT avg(age) FROM Dogs", "sql_gerado": "SELECT AVG(age) FROM dogs"}
{"id": "dog_kennels", "pergunta": "Compute the average age of all the dogs.", "sql_esperado": "SELECT avg(age) FROM Dogs", "sql_gerado": "SELECT AVG(age) FROM dogs WHERE species = 'dog'"}
{"id": "dog_kennels", "pergunta": "What is the age of the oldest dog?", "sql_esperado": "SELECT max(age) FROM Dogs", "sql_gerado": "SELECT MAX(age) FROM dogs"}
{"id": "dog_kennels", "pergunta": "Tell me the age of the oldest dog.", "sql_esperado": "SELECT max(age) FROM Dogs", "sql_gerado": "SELECT max(age) FROM dogs"}
{"id": "dog_kennels", "pergunta": "How much does each charge type costs? List both charge type and amount.", "sql_esperado": "SELECT charge_type ,  charge_amount FROM Charges", "sql_gerado": "SELECT charge_type, COALESCE(AVG(cost), 0) AS average_cost FROM charges GROUP BY charge_type"}
{"id": "dog_kennels", "pergunta": "List each charge type and its amount.", "sql_esperado": "SELECT charge_type ,  charge_amount FROM Charges", "sql_gerado": "SELECT charge_type, amount FROM charges"}
{"id": "dog_kennels", "pergunta": "How much does the most expensive charge type costs?", "sql_esperado": "SELECT max(charge_amount) FROM Charges", "sql_gerado": "SELECT MAX(cost) FROM charge_type"}
{"id": "dog_kennels", "pergunta": "What is the charge amount of the most expensive charge type?", "sql_esperado": "SELECT max(charge_amount) FROM Charges", "sql_gerado": "SELECT MAX(charge_amount) FROM charges WHERE charge_type = (SELECT MAX(charge_type) FROM charges)"}
{"id": "dog_kennels", "pergunta": "List the email, cell phone and home phone of all the professionals.", "sql_esperado": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "sql_gerado": "SELECT email, cell_phone, home_phone FROM professionals"}
{"id": "dog_kennels", "pergunta": "What are the email, cell phone and home phone of each professional?", "sql_esperado": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "sql_gerado": "SELECT email, cell_phone, home_phone FROM professional"}
{"id": "dog_kennels", "pergunta": "What are all the possible breed type and size type combinations?", "sql_esperado": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "sql_gerado": "SELECT breed_type, size_type FROM pet"}
{"id": "dog_kennels", "pergunta": "Find the distinct breed type and size type combinations for dogs.", "sql_esperado": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "sql_gerado": "SELECT breed_type, size_type FROM dogs GROUP BY breed_type, size_type"}
{"id": "dog_kennels", "pergunta": "List the first name of all the professionals along with the description of the treatment they have done.", "sql_esperado": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "sql_gerado": "SELECT first_name, treatment_description FROM professional"}
{"id": "dog_kennels", "pergunta": "What are each professional's first name and description of the treatment they have performed?", "sql_esperado": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "sql_gerado": "SELECT first_name, treatment_description FROM professionals"}
{"id": "singer", "pergunta": "How many singers are there?", "sql_esperado": "SELECT count(*) FROM singer", "sql_gerado": "SELECT COUNT(*) FROM singers"}
{"id": "singer", "pergunta": "What is the count of singers?", "sql_esperado": "SELECT count(*) FROM singer", "sql_gerado": "SELECT COUNT(*) FROM singer"}
{"id": "singer", "pergunta": "List the name of singers in ascending order of net worth.", "sql_esperado": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "sql_gerado": "SELECT name FROM singers ORDER BY net_worth ASC"}
{"id": "singer", "pergunta": "What are the names of singers ordered by ascending net worth?", "sql_esperado": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "sql_gerado": "SELECT name FROM singers ORDER BY net_worth ASC"}
{"id": "singer", "pergunta": "What are the birth year and citizenship of singers?", "sql_esperado": "SELECT Birth_Year ,  Citizenship FROM singer", "sql_gerado": "SELECT birth_year, citizenship FROM singers"}
{"id": "singer", "pergunta": "What are the birth years and citizenships of the singers?", "sql_esperado": "SELECT Birth_Year ,  Citizenship FROM singer", "sql_gerado": "SELECT birth_year, citizenship FROM singer"}
{"id": "singer", "pergunta": "List the name of singers whose citizenship is not \"France\".", "sql_esperado": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "sql_gerado": "SELECT name FROM singers WHERE citizenship != 'France'"}
{"id": "singer", "pergunta": "What are the names of the singers who are not French citizens?", "sql_esperado": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "sql_gerado": "SELECT singer_name FROM singer WHERE nationality != 'French'"}
{"id": "singer", "pergunta": "Show the name of singers whose birth year is either 1948 or 1949?", "sql_esperado": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "sql_gerado": "SELECT name FROM singers WHERE born_year IN (1948, 1949)"}
{"id": "singer", "pergunta": "What are the names of the singers whose birth years are either 1948 or 1949?", "sql_esperado": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "sql_gerado": "SELECT name FROM singers WHERE born_year IN (1948, 1949)"}
{"id": "singer", "pergunta": "What is the name of the singer with the largest net worth?", "sql_esperado": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "sql_gerado": "SELECT singer_name FROM net_worth ORDER BY net_worth DESC LIMIT 1"}
{"id": "singer", "pergunta": "What is the name of the singer who is worth the most?", "sql_esperado": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "sql_gerado": "SELECT singer_name FROM artist WHERE net_worth_in_millions = (SELECT MAX(net_worth_in_millions) FROM artist)"}
{"id": "singer", "pergunta": "Show different citizenship of singers and the number of singers of each citizenship.", "sql_esperado": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "sql_gerado": "SELECT citizenship, COUNT(*) as num_singers FROM singer GROUP BY citizenship"}
{"id": "singer", "pergunta": "For each citizenship, how many singers are from that country?", "sql_esperado": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "sql_gerado": "SELECT citizenship, COUNT(*) as number_of_singers FROM singers GROUP BY citizenship"}
{"id": "singer", "pergunta": "Please show the most common citizenship of singers.", "sql_esperado": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "sql_gerado": "SELECT mode(citizenship) AS most_common_citizenship FROM singers"}
{"id": "singer", "pergunta": "What is the most common singer citizenship ?", "sql_esperado": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "sql_gerado": "SELECT country FROM singer GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1"}
{"id": "singer", "pergunta": "Show different citizenships and the maximum net worth of singers of each citizenship.", "sql_esperado": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "sql_gerado": "SELECT citizenship, MAX(net_worth) as max_net_worth FROM singers GROUP BY citizenship"}
{"id": "singer", "pergunta": "For each citizenship, what is the maximum net worth?", "sql_esperado": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "sql_gerado": "SELECT citizenship, MAX(net_worth) AS max_net_worth FROM individual GROUP BY citizenship"}
{"id": "singer", "pergunta": "Show titles of songs and names of singers.", "sql_esperado": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "sql_gerado": "SELECT song_title, singer_name FROM songs_and_singers"}
{"id": "singer", "pergunta": "What are the song titles and singer names?", "sql_esperado": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "sql_gerado": "SELECT song_title, singer_name FROM songs"}
{"id": "singer", "pergunta": "Show distinct names of singers that have songs with sales more than 300000.", "sql_esperado": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "sql_gerado": "SELECT DISTINCT singer_name FROM songs JOIN singers ON songs.singer_id = singers.id WHERE sales > 300000"}
{"id": "singer", "pergunta": "what are the different names of the singers that have sales more than 300000?", "sql_esperado": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "sql_gerado": "SELECT singer_name FROM sales WHERE sales > 300000"}
{"id": "singer", "pergunta": "Show the names of singers that have more than one song.", "sql_esperado": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "sql_gerado": "SELECT singer_name FROM songs JOIN singers ON songs.singer_id = singers.id GROUP BY singer_name HAVING COUNT(song_title) > 1"}
{"id": "singer", "pergunta": "What are the names of the singers that have more than one songs?", "sql_esperado": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "sql_gerado": "SELECT singer_name FROM songs"}
{"id": "singer", "pergunta": "Show the names of singers and the total sales of their songs.", "sql_esperado": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "sql_gerado": "SELECT singer_name, SUM(song_sales) FROM songs GROUP BY singer_name"}
{"id": "singer", "pergunta": "For each singer name, what is the total sales for their songs?", "sql_esperado": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "sql_gerado": "SELECT singer_name, SUM(song_sales) FROM songs GROUP BY singer_name"}
{"id": "singer", "pergunta": "List the name of singers that do not have any song.", "sql_esperado": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "sql_gerado": "SELECT singer_name FROM singer WHERE song_id IS NULL"}
{"id": "singer", "pergunta": "What is the sname of every sing that does not have any song?", "sql_esperado": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "sql_gerado": "This question seems to be mixing data from two different tables (songs and singers), and it's not clear how the \"sname\" should be determined if a singer doesn't have any songs. Assuming there's a table named `singers` and a foreign key `singer_id` in the `songs` table, we can find singers without songs like this:"}
{"id": "singer", "pergunta": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "sql_esperado": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "sql_gerado": "SELECT citizenship FROM singer WHERE birth_year BETWEEN 1946 AND 1955"}
{"id": "singer", "pergunta": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "sql_esperado": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "sql_gerado": "SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955 GROUP BY citizenship HAVING COUNT(*) > 1"}
{"id": "real_estate_properties", "pergunta": "How many available features are there in total?", "sql_esperado": "SELECT count(*) FROM Other_Available_Features", "sql_gerado": "SELECT COUNT(*) FROM features WHERE available = true"}
{"id": "real_estate_properties", "pergunta": "What is the feature type name of feature AirCon?", "sql_esperado": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "sql_gerado": "SELECT feature_type_name FROM features WHERE feature_name = 'AirCon'"}
{"id": "real_estate_properties", "pergunta": "Show the property type descriptions of properties belonging to that code.", "sql_esperado": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "sql_gerado": "SELECT property_type_description FROM properties WHERE property_code = YOUR_CODE_HERE"}
{"id": "real_estate_properties", "pergunta": "What are the names of properties that are either houses or apartments with more than 1 room?", "sql_esperado": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "sql_gerado": "SELECT property_name FROM properties WHERE property_type IN ('House', 'Apartment') AND rooms > 1"}
